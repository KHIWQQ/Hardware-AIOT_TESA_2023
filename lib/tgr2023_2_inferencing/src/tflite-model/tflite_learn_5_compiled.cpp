/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 03:43:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368288;
#else
constexpr int kTensorArenaSize = 367264;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003506343811750412, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[13] = { 18483, -27408, -26824, -25777, -24034, -26033, -25688, -28285, -25769, -27081, -29512, -19282, -25473, };
const TfArray<1, int> tensor_dimension2 = { 1, { 13 } };
const TfArray<13, float> quant2_scale = { 13, { 0.00029528839513659477, 0.00028404075419530272, 0.00029406367684714496, 0.00031636503990739584, 0.00031569413840770721, 0.00029850556165911257, 0.00029952931799925864, 0.00027495011454448104, 0.00031186977867037058, 0.00027937773847952485, 0.00027584366034716368, 0.00038611554191447794, 0.00032029976136982441, } };
const TfArray<13, int> quant2_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[13*1*1*32] = { 
  /* [0][0][][] */ 52,-39,118,-64,-46,94,-6,-9,-62,-111,77,36,-115,-21,-33,-65,-56,-71,26,-40,86,2,62,127,24,-42,-54,24,-80,99,78,-55, 
  /* [1][0][][] */ 54,74,26,95,-47,50,-48,88,75,1,19,-110,115,2,78,-88,4,4,-103,-59,-29,65,-127,-21,20,-97,-117,30,80,-105,92,19, 
  /* [2][0][][] */ -25,8,-60,-83,65,98,-76,-9,91,85,67,75,-82,-54,67,49,80,45,-39,-127,4,103,14,-69,41,25,-14,-58,72,79,1,12, 
  /* [3][0][][] */ 4,115,33,45,-6,-33,-60,-14,-74,43,10,-114,-73,-25,-58,-127,-1,-56,21,-17,52,96,-93,21,60,-47,-5,87,51,66,38,-15, 
  /* [4][0][][] */ -69,-34,31,21,9,-74,-38,-23,22,-18,-82,-50,4,53,-77,47,43,-77,-127,78,105,36,-69,-102,-12,-81,34,-5,40,33,98,6, 
  /* [5][0][][] */ 1,-22,8,57,101,70,-115,22,-50,72,-104,51,-15,27,101,-68,73,3,-25,82,58,7,-50,-127,-41,77,-47,71,50,-50,-73,36, 
  /* [6][0][][] */ 40,0,120,17,-81,-64,11,10,-82,51,84,92,26,33,-101,26,-18,-73,-89,-44,-48,-39,-52,-127,68,73,95,-37,34,-5,-30,-26, 
  /* [7][0][][] */ -103,-23,-52,-63,-105,-101,-98,44,95,4,35,-3,3,45,93,-125,-51,-31,-101,80,109,-19,-127,-34,65,27,93,-77,-33,75,86,-61, 
  /* [8][0][][] */ -127,37,-54,14,-13,26,-23,84,78,-9,-26,42,-2,-16,17,-113,-4,5,-125,72,18,47,-84,-96,29,84,89,-55,-6,-20,60,70, 
  /* [9][0][][] */ -127,-2,2,-53,-104,84,-30,19,-32,68,-53,81,21,-79,-22,-60,19,-105,-110,-70,118,-10,-29,-25,-52,-78,39,68,-24,53,-80,-35, 
  /* [10][0][][] */ -37,113,-32,64,68,117,-68,-75,-18,60,6,99,40,73,-34,32,1,-74,-127,37,-102,106,-120,-68,2,-126,117,85,-22,64,20,66, 
  /* [11][0][][] */ -34,5,-40,-83,-12,21,-63,-22,-52,82,52,-8,59,-46,13,-64,35,16,-9,-40,59,-24,-127,19,66,3,-72,-73,31,-51,80,29, 
  /* [12][0][][] */ -127,104,-80,39,19,-37,-53,-4,-49,-50,-20,-21,86,-34,87,58,37,-49,-76,12,17,22,-40,16,35,52,35,-69,-68,77,95,8, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 13,1,1,32 } };
const TfArray<13, float> quant3_scale = { 13, { 0.0033060458954423666, 0.0031801173463463783, 0.0032923338003456593, 0.0035420197527855635, 0.003534508403390646, 0.0033420652616769075, 0.0033535272814333439, 0.0030783386901021004, 0.0034916908480226994, 0.0031279101967811584, 0.0030883427243679762, 0.0043229456059634686, 0.0035860729403793812, } };
const TfArray<13, int> quant3_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 702, 47, 392, 20, -291, 45, 579, 62, -243, 259, 34, -508, 226, -11, -227, 130, -182, -73, 797, 209, 162, -296, 986, 1210, -312, -134, 14, -182, -408, -270, -192, 75, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.8513967815088108e-05, 5.6123004469554871e-05, 4.6278280933620408e-05, 4.7537938371533528e-05, 3.9919523260323331e-05, 4.228320176480338e-05, 4.7512847231701016e-05, 5.1297753088874742e-05, 4.7027173422975466e-05, 4.5198845327831805e-05, 4.3924286728724837e-05, 4.2252442653989419e-05, 4.6005938202142715e-05, 5.1511819037841633e-05, 4.1030267311725765e-05, 4.9587790272198617e-05, 5.3422667406266555e-05, 6.2607730797026306e-05, 8.4194994997233152e-05, 5.3455369197763503e-05, 6.3710998801980168e-05, 5.160825458006002e-05, 6.5523854573257267e-05, 8.0762649304233491e-05, 4.2298826883779839e-05, 5.4682157497154549e-05, 5.9159039665246382e-05, 4.2466563172638416e-05, 4.1313189285574481e-05, 4.8832749598659575e-05, 4.083304520463571e-05, 5.1912495109718293e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -12,-30,101,0,82,34,-53,-71,50,-49,-75,14,37,11,-2,40,-13,-6,-41,-6,-48,-65,41,114,-69,24,95,-16,82,4,-2,-66,65,-45,-54,48,-44,-51,-77,30,63,-54,-63,88,38,-91,78,-2,13,-42,-31,78,-54,-39,-41,79,47,45,127,-66,-62,86,-17,58,4,16,66,68,52,82,119,-78,89,-71,67,71,-77,43,-38,19,41,20,69,-20,-41,-5,-63,66,17,84,-9,-97,9,69,17,29, 
  /* [1][0][][] */ -41,37,-47,-15,-9,97,29,19,43,-127,-77,36,43,-12,28,52,88,-35,42,121,-46,-9,8,11,42,7,-46,89,39,28,83,-33,72,93,-57,35,22,61,-1,-39,-38,-1,-6,-70,-14,39,-18,-31,-3,-96,71,67,17,79,-68,-60,34,86,-17,74,-30,22,-32,-80,-28,37,49,45,107,35,-38,10,-104,91,-17,41,82,-44,-28,31,-49,80,-59,-77,31,99,-47,-41,68,72,87,36,79,15,40,0, 
  /* [2][0][][] */ 56,45,-42,103,-16,-108,91,107,-72,71,-22,86,88,-6,86,-92,-56,-30,60,56,-68,-2,103,26,-13,75,92,19,-61,91,90,104,-69,-5,-77,-86,-77,105,124,-17,-98,-55,24,5,-67,127,-12,-54,102,43,116,-66,-22,76,22,25,-48,100,-61,16,-2,64,-26,67,107,52,51,92,-87,75,10,-47,17,-53,36,38,-34,-29,14,22,48,-77,0,-22,16,-85,-9,-13,104,114,-9,29,-24,-88,-26,-62, 
  /* [3][0][][] */ 68,8,46,-66,-44,30,-127,46,36,-14,61,-18,87,94,69,6,95,95,-40,47,106,-84,-56,-126,-4,-107,-98,103,37,-78,77,20,-36,-19,-53,-2,-81,-8,44,56,-12,-82,-79,1,77,30,-45,-72,70,-105,33,-29,91,46,64,-90,-89,-105,-117,-42,-76,3,-12,56,73,-26,-61,-12,-9,-45,-23,101,23,-68,70,-35,40,100,83,-43,-75,-89,28,88,28,50,-34,-104,-69,39,16,-88,103,-121,-77,33, 
  /* [4][0][][] */ 50,103,-3,60,-32,-39,30,13,66,98,-14,56,37,-45,-17,-75,-32,-12,-27,9,113,-100,87,24,-25,-11,65,-65,-48,29,-76,-63,69,116,117,-116,-56,-15,-125,46,-61,-70,-85,-102,30,108,31,56,20,-47,-13,-88,-97,41,-97,20,32,-105,18,9,2,-82,-50,-78,-59,54,-1,-46,20,-115,-104,-87,-65,13,97,53,58,-30,-13,-65,0,-54,-110,-27,-5,67,92,-4,-127,-86,43,43,25,113,-113,-21, 
  /* [5][0][][] */ 81,-102,58,63,24,-102,15,50,87,-78,-11,-41,18,98,48,25,95,63,-109,87,20,40,45,-18,-117,-62,-3,-124,43,15,12,-109,-73,-2,22,7,-92,-38,26,18,-88,-64,37,108,-34,11,49,-56,-127,126,-5,26,20,10,48,-9,100,35,-15,-49,26,-13,26,-76,-33,98,-39,17,62,-3,118,-99,-20,68,11,-91,-9,-24,-4,63,96,26,44,89,-97,70,-15,20,45,-106,101,70,-38,46,56,-78, 
  /* [6][0][][] */ 28,-36,126,107,-68,34,14,64,38,74,15,-19,93,60,127,-95,57,8,44,91,-62,-89,122,83,-53,-67,7,-11,-13,-116,58,-79,-53,-107,16,-97,27,31,-86,75,78,66,22,1,-98,95,-79,-26,-64,58,-14,-53,65,-59,106,13,18,-11,11,110,-88,107,54,-40,-74,64,113,-48,52,-8,-62,10,52,-74,-14,-24,-81,-67,-38,-9,33,-26,62,-27,-55,-71,-29,-86,80,87,81,-2,-43,-1,54,-32, 
  /* [7][0][][] */ 87,69,-63,-40,-58,66,-29,-1,85,-15,-80,-17,51,-70,37,66,34,34,-41,98,44,27,6,48,-50,91,-5,-10,-105,92,-30,32,34,30,58,102,-93,83,-13,-20,100,-71,79,57,50,-4,111,-91,46,-79,-127,-72,-26,87,12,30,95,-68,-38,-45,13,-42,70,-92,-39,-44,50,22,-87,31,23,65,99,25,86,41,-50,76,-93,70,74,-22,-10,-68,65,18,-85,75,69,7,81,48,-50,-48,3,-35, 
  /* [8][0][][] */ 5,25,-46,-94,58,52,-84,-34,-2,24,34,105,-1,-47,-88,-74,-67,99,-77,13,8,-31,86,84,-104,82,35,42,-84,12,-101,97,109,-34,63,-1,119,-1,-35,58,74,81,-113,-119,-14,-42,-17,89,18,-44,-75,-22,-74,-6,-23,-112,37,92,-97,91,94,64,38,101,-20,-50,-26,84,-86,41,19,-17,101,58,81,12,-50,127,62,91,21,75,-126,-96,7,30,62,-49,18,-46,-78,80,-84,-84,-55,66, 
  /* [9][0][][] */ 13,26,123,44,98,-86,-42,-92,33,-23,2,-5,-26,-63,-95,-16,15,0,-85,-57,17,96,-115,-111,126,-48,-27,34,8,-35,-75,119,81,19,-43,3,-78,37,-18,-25,61,-54,65,-79,94,35,-92,68,69,-47,-77,-33,88,-48,-94,66,102,-33,-103,14,-63,24,106,-92,-54,22,98,66,-17,114,31,-72,18,99,-88,-75,-53,-110,-27,100,51,44,78,46,-28,-70,50,2,108,47,-6,127,125,-66,78,-33, 
  /* [10][0][][] */ -67,95,99,-79,2,104,99,32,17,55,21,-74,90,82,-35,7,-20,85,-110,-38,-13,24,57,-81,40,46,-127,-108,-24,89,-100,-75,105,101,84,89,-38,14,-37,37,-25,116,-105,-36,-90,-57,-2,-48,8,35,11,8,70,27,-58,-56,-90,-9,-39,-40,-3,54,125,32,127,-72,-103,-19,37,-13,-112,-55,86,70,-19,109,-9,79,61,20,80,4,42,101,-98,76,100,-23,43,10,8,-62,-48,-53,-42,-65, 
  /* [11][0][][] */ 102,3,-28,90,117,47,40,16,100,83,-94,105,-16,-98,16,-81,-65,-114,60,40,22,62,12,-127,-118,-104,-31,62,79,-8,18,-28,-98,-85,35,37,-75,66,-46,-74,-37,90,-88,-8,-52,-72,-104,-103,68,107,111,47,-103,-100,11,20,-72,-66,-37,-102,-89,83,85,7,27,75,-72,18,89,46,-100,-88,26,98,-103,39,-69,21,-59,78,-118,-36,-73,-56,36,-88,1,-37,-104,-16,0,-105,-93,-36,-73,-44, 
  /* [12][0][][] */ 9,75,-39,-9,87,-32,-32,45,-67,-2,-7,-23,-27,22,51,-67,-90,-26,-39,-54,44,-14,14,93,-57,-47,91,-80,95,27,-24,124,-81,-52,-107,27,-5,-62,-4,52,115,47,-94,-26,-7,-60,-37,116,-26,-127,-42,107,48,13,-83,81,-4,-45,-11,74,72,63,6,28,114,42,-54,125,58,105,-2,82,73,122,-22,8,-19,27,-102,-82,-42,106,60,29,-23,39,62,124,-69,-87,105,54,110,-56,41,73, 
  /* [13][0][][] */ 108,-50,90,85,76,-26,70,56,91,-122,15,-28,76,60,50,-31,-127,-55,-40,33,67,-23,85,-40,-49,36,36,20,-84,-68,93,37,33,88,-77,35,-64,-23,26,60,-53,73,-45,13,-33,39,2,-24,36,105,29,-78,-70,29,88,-76,-37,25,-59,-58,-22,96,-67,15,-40,-51,-87,76,-40,-10,55,11,-100,41,-83,-30,-76,25,73,-37,50,-76,68,30,-57,-82,79,114,-3,-41,-58,63,106,-52,70,-6, 
  /* [14][0][][] */ -62,-109,88,76,81,-34,-22,-112,-83,-45,68,87,-31,-87,-102,-91,-61,-71,17,18,-49,29,-8,61,-122,-81,-43,34,-122,-123,-88,36,102,-32,-41,1,96,113,45,-114,-15,-124,32,91,61,-120,61,-96,113,41,81,51,106,-22,-25,5,-54,9,51,103,-19,-94,-33,69,-98,-16,77,-109,-99,-98,-95,94,0,78,44,-75,58,-118,55,34,42,-23,-125,-40,-127,-102,-119,111,111,3,93,-56,90,101,-17,63, 
  /* [15][0][][] */ 27,-30,9,87,81,-66,63,-71,108,14,-59,10,85,9,-58,-98,84,-1,-9,28,46,23,72,124,66,60,56,108,40,54,78,-87,6,11,-26,-7,-43,94,127,-57,7,94,-40,-6,28,-61,-49,-62,-1,-62,68,45,-60,-87,-41,18,66,43,-80,101,-31,-48,-4,104,-29,85,-55,4,-53,8,41,-63,4,0,78,-77,-1,48,96,69,-65,52,-61,-52,-94,-33,-80,37,83,58,-86,-29,67,106,-91,96, 
  /* [16][0][][] */ -52,-4,65,-61,47,80,-43,40,43,-9,-83,20,-19,-37,-52,-43,92,50,61,67,93,57,-40,43,-23,40,-53,30,-64,32,36,21,-102,68,25,45,-33,48,-25,-49,20,-32,60,80,53,93,85,-7,-47,-127,35,111,-25,100,42,16,27,82,-56,16,101,39,35,36,57,17,-40,83,46,81,-63,-8,27,79,45,69,5,64,-86,-37,17,-60,31,19,14,82,85,20,67,14,-5,103,67,-64,-57,13, 
  /* [17][0][][] */ 22,-78,23,56,-31,-80,-47,-69,29,28,57,89,115,40,-80,32,24,36,119,76,-63,-9,11,-37,14,44,-54,30,127,-41,-22,49,-16,-18,83,3,-31,66,-63,-23,-68,-29,-12,-8,2,6,56,-75,59,121,-11,15,16,51,69,-51,-83,57,-19,-79,20,-16,49,67,-64,-53,30,-73,-79,-3,88,33,10,-84,-45,46,77,-32,28,-41,5,-13,-49,-66,-79,48,54,-26,15,51,-70,-85,-12,106,5,12, 
  /* [18][0][][] */ -42,60,74,-26,16,33,-34,4,-15,79,-43,31,-15,24,50,-21,43,-4,20,-2,51,-5,45,16,27,-5,12,69,31,23,1,12,43,-18,-2,-50,33,20,-13,32,-13,0,-19,18,-54,2,26,10,14,8,14,32,-58,-12,60,52,-21,14,67,-55,38,127,17,43,-33,-59,9,40,51,-31,55,52,4,-21,4,-42,25,70,12,-34,-27,1,-10,-41,57,4,39,25,-55,-34,-36,47,42,25,22,6, 
  /* [19][0][][] */ 30,26,61,53,46,-127,91,78,109,-61,34,-1,-65,34,-42,63,44,-62,102,44,-6,81,-46,13,70,-53,47,-45,-79,-92,-31,46,71,-58,10,2,8,-49,-40,-72,42,-76,-56,8,-60,38,73,-72,-12,29,3,45,-20,22,2,-3,21,91,80,-13,53,-16,78,62,-52,6,-7,9,-6,51,65,-19,-47,-83,-96,-55,-7,-102,25,109,57,-82,-19,78,-56,-3,18,12,87,34,4,67,-13,109,71,-24, 
  /* [20][0][][] */ 3,58,47,74,-50,61,19,49,11,-40,-49,-18,1,66,29,-39,-36,-18,-42,-35,23,-24,-52,-45,61,-46,-73,37,17,12,-23,88,73,40,0,49,22,-14,-1,-63,-49,-15,-49,-62,-10,-34,-40,78,49,-127,-71,26,42,85,30,4,71,64,57,68,85,-77,-35,-22,-7,-34,-27,21,-45,-41,-62,65,-36,-48,-51,22,82,52,84,86,68,14,54,-4,49,88,0,59,21,74,32,55,26,-3,5,17, 
  /* [21][0][][] */ 77,58,55,-114,92,-45,48,10,-20,-80,-67,8,-6,27,-40,-84,-83,-35,26,11,71,-56,49,-80,51,-72,-24,53,20,16,-5,-13,4,17,-83,-97,87,83,-102,-28,-6,-12,19,-13,-80,-71,-65,72,-23,-80,-8,82,22,60,-80,18,-48,36,-127,97,46,-111,19,-5,72,24,-49,-58,-70,-7,9,43,14,-8,95,45,-86,-30,43,58,9,84,12,-64,17,-81,44,-73,-104,62,88,-91,-36,-87,58,-21, 
  /* [22][0][][] */ 28,-31,-16,-42,64,33,84,40,-32,122,-42,2,116,-62,-57,-52,74,59,-71,-45,88,-32,77,91,54,42,10,92,-4,-49,-10,-84,58,38,108,9,81,-12,-30,-77,5,17,3,103,38,-77,59,-7,-21,-14,50,-4,-34,-71,48,56,-11,-25,92,-17,69,75,-54,-1,-54,15,-52,-38,67,66,127,7,10,-4,87,-40,18,7,53,66,68,-67,-11,-88,59,74,71,-29,-22,19,-49,27,8,86,-39,59, 
  /* [23][0][][] */ 38,-38,34,61,38,-9,25,-45,46,6,60,75,28,-39,49,-17,75,-7,-68,36,66,-19,101,46,-16,11,63,28,31,-2,49,-29,-35,30,35,16,80,-6,-51,14,-53,16,19,-20,-32,-50,60,27,38,-75,-51,-43,37,-37,19,58,-36,-15,127,29,-57,6,-43,-2,11,30,-36,-57,11,0,123,-29,6,-33,-30,-35,9,30,69,79,-28,-35,27,-59,56,19,70,-18,-47,28,51,-25,48,-18,-38,57, 
  /* [24][0][][] */ -81,-60,-115,-74,-88,-114,-76,-102,60,110,77,39,112,53,-49,-127,-92,35,19,-54,90,-90,-66,-45,48,-32,67,49,102,55,-5,-66,-2,1,51,19,-64,-92,58,-26,-82,-109,95,-5,12,-47,41,64,-96,-49,-26,15,62,56,69,-80,-14,71,27,-8,82,-13,36,92,-101,90,-55,-93,-105,43,-65,-32,-47,38,89,93,62,-86,-114,-92,-89,-104,-70,-123,-7,56,-23,-107,19,-120,1,-80,-26,29,-100,25, 
  /* [25][0][][] */ -72,-49,-102,4,78,-122,-69,44,42,-71,-24,11,40,-4,-106,-5,-59,63,4,-55,56,74,-31,-73,19,-31,-127,-9,81,-47,25,94,68,-85,24,58,68,-37,-8,-13,-41,87,-78,-10,76,41,111,34,-87,77,-53,34,34,-5,-56,-17,-14,52,-114,61,92,34,48,39,17,60,-13,-1,-44,2,-38,-77,52,-87,20,6,73,39,12,15,43,44,-57,76,-54,-54,-80,-58,-1,-26,82,29,-87,-13,10,-59, 
  /* [26][0][][] */ 53,-73,-13,15,-64,-56,4,4,-57,-127,86,36,-54,-24,14,3,61,26,-50,-43,22,59,46,5,50,44,10,41,21,17,-52,19,-26,-33,-109,-62,-63,74,-20,90,-61,88,54,24,-39,71,-23,86,-4,4,8,87,25,-21,-14,-85,85,64,-3,32,18,-105,54,-13,89,-1,-38,57,-49,71,28,90,33,-49,-120,15,48,-109,-56,19,-1,65,52,-31,76,9,-22,31,-41,96,25,38,-20,67,56,63, 
  /* [27][0][][] */ 9,6,-61,-105,-124,-68,-71,-20,40,78,35,-108,-24,55,82,-33,63,-18,71,-82,-100,10,-31,-24,-108,48,-108,-5,64,28,-36,-12,64,67,-127,-91,-94,-68,-117,87,-98,13,26,14,97,22,66,99,86,67,55,-78,-93,-88,-5,-40,99,-29,-108,-82,-60,-63,-36,62,38,-49,-113,104,46,8,-121,1,60,-53,1,-89,46,-68,87,101,83,-30,100,-59,-77,-86,-36,29,-51,-6,-37,-54,53,6,86,56, 
  /* [28][0][][] */ 78,-10,81,33,-119,-67,-113,-89,-47,-120,49,69,-83,-96,-8,92,88,109,-75,75,-35,12,-124,-91,-127,76,-93,-65,-78,-80,-9,-21,-112,8,68,69,7,-122,-53,24,95,29,-104,39,-119,-17,-4,38,16,-66,-83,-41,-90,18,46,37,59,-20,70,45,-9,-53,-102,3,53,66,-34,79,-83,22,-121,-52,59,36,-11,-112,-122,-79,-99,39,-81,-103,111,-35,56,-126,55,-89,-109,-79,-42,-69,-43,51,-103,-75, 
  /* [29][0][][] */ 52,48,48,-50,-75,28,-105,4,78,-29,-80,-105,92,-90,-40,-43,-88,83,15,-58,-70,-38,33,4,-31,-1,-37,-22,-78,-10,88,2,35,-1,-100,-48,-19,87,-11,84,39,91,-40,70,2,91,-54,-25,13,-16,41,-84,61,-92,89,35,-79,48,-127,94,-97,26,-77,-48,-63,-53,37,80,92,-77,-9,-62,79,72,29,22,99,-70,-27,20,1,-76,-21,-63,58,107,33,72,-35,85,66,77,-86,-1,-3,49, 
  /* [30][0][][] */ 25,-79,-72,39,-103,25,-70,-17,120,-22,-5,-46,-106,15,52,12,-12,33,97,-110,41,-109,-126,9,-118,20,-77,119,-14,-114,-103,5,-88,-78,-123,-65,9,-26,-5,27,86,-85,-19,95,99,-50,100,57,-78,78,18,-110,99,-55,-19,99,-85,-58,-85,-59,-110,-10,-80,-30,-114,-96,-101,96,-65,112,49,-38,-94,104,33,-94,-62,-80,-81,-64,26,28,-112,-23,-118,21,-115,112,-41,-127,82,57,-37,-8,7,-75, 
  /* [31][0][][] */ 73,-72,26,88,46,42,-45,-77,-20,-42,-60,-89,80,-95,-33,98,-51,-72,27,46,53,32,-23,95,43,-87,35,24,-65,-54,45,97,10,24,-98,-2,83,-19,-51,-86,56,-54,-19,35,11,-38,-25,26,61,3,84,-17,-94,-41,-69,6,-94,62,-17,101,-26,-25,77,-64,63,99,-38,-59,68,-97,-127,8,-76,-27,-4,7,-42,-38,46,77,-57,-29,40,67,53,85,-73,21,13,-36,-71,-39,17,68,3,-18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.00248684361577034, 0.0023852277081459761, 0.0019668268505483866, 0.0020203622989356518, 0.001696579740382731, 0.0017970360349863768, 0.0020192959345877171, 0.0021801544353365898, 0.0019986547995358706, 0.0019209509482607245, 0.0018667822005227208, 0.0017957288073375821, 0.0019552523735910654, 0.0021892522927373648, 0.0017437862697988749, 0.0021074810065329075, 0.0022704633884131908, 0.0026608286425471306, 0.0035782870836555958, 0.0022718531545251608, 0.0027077174745500088, 0.0021933508105576038, 0.0027847636956721544, 0.0034324126318097115, 0.0017977001843973994, 0.0023239916190505028, 0.0025142591912299395, 0.0018048288766294718, 0.0017558105755597353, 0.0020753918215632439, 0.0017354043666273355, 0.0022062810603529215, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1142, 2180, 3546, 1645, -2382, -2446, 12393, 1784, 2238, -722, 6615, -484, -5444, 1373, 7676, 4843, 6720, 4111, -2932, -3841, 2980, 18059, 7935, 12057, 694, 797, 3760, 2439, 1448, -4304, 5895, -1363, -149, 3280, 309, 578, 6585, 2521, -1606, 3035, 4309, 3387, 2458, 9878, 2571, 3237, 1000, 6322, 2995, -3150, -3459, 397, -185, -889, 1469, 67, 190, -407, -3307, 7111, -520, 967, -1189, -2040, -2829, 5613, 10437, 1136, -2006, 470, 1126, 1559, 1611, -870, 321, 6256, -412, 8676, 8283, -519, 6343, 1739, -291, 788, 13322, 6165, 2170, 1016, 3264, 3305, -139, -4829, 553, -2211, -1291, -1502, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00054810126312077045, 0.00068870675750076771, 0.00068192853359505534, 0.00056655285879969597, 0.00044480300857685506, 0.00059856253210455179, 0.00026871584123000503, 0.00039801793172955513, 0.00025980779901146889, 0.00075660034781321883, 0.00030047062318772078, 0.00025959900813177228, 0.00047308744979090989, 0.0020931600593030453, 0.00040627244743518531, 0.00023520815011579543, 0.00028481218032538891, 0.00034953156136907637, 0.00066796160535886884, 0.00044014584273099899, 0.00020986996241845191, 0.00014972755161579698, 0.0003867057675961405, 0.00014073708734940737, 0.00028668929007835686, 0.00057141965953633189, 0.00080353673547506332, 0.00043400985305197537, 0.0003836815885733813, 0.00045636622235178947, 0.00025170546723529696, 0.00056053814478218555, 0.00034377994597889483, 0.00034421600867062807, 0.00047141945105977356, 0.00042559779831208289, 0.00029328122036531568, 0.00041365294600836933, 0.00038676796248182654, 0.00058486446505412459, 0.00029094339697621763, 0.00076316640479490161, 0.00060858839424327016, 0.00023456176859326661, 0.00073344999691471457, 0.00029692138195969164, 0.00051246816292405128, 0.00033972141682170331, 0.00044763885671272874, 0.00039069337071850896, 0.00045819312799721956, 0.0002852508332580328, 0.00090942956740036607, 0.00034359795972704887, 0.00053452735301107168, 0.00045195154962129891, 0.00058289611479267478, 0.00064806075533851981, 0.00043893174733966589, 0.0002594685647636652, 0.0014498181408271194, 0.00068058469332754612, 0.00023152532230596989, 0.00037020962918177247, 0.00064992101397365332, 0.0003431116056162864, 0.00020790168491657823, 0.00034542178036645055, 0.00058469339273869991, 0.00068989425199106336, 0.00039305715472437441, 0.00032734061824157834, 0.00083431071834638715, 0.00047993491170927882, 0.00050330202793702483, 0.00033983116736635566, 0.00033863980206660926, 0.00021904775348957628, 0.000220423549762927, 0.0003321192052680999, 0.00023438045172952116, 0.00018554336566012353, 0.00026790506672114134, 0.00028898226446472108, 0.00013664757716469467, 0.00038171597407199442, 0.0010874551953747869, 0.00029627498588524759, 0.00021738524083048105, 0.00060523388674482703, 0.00047250089119188488, 0.00040178274502977729, 0.00042695176671259105, 0.0004661570128519088, 0.00046442975872196257, 0.00028417367138899863, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -26,78,-1,-127,-40,-39,-16,-92,-16,12,14,73,20,-50,-5,58, 
  /* [1][0][][] */ -30,29,-42,12,-33,-2,0,-51,37,30,-58,21,6,0,20,-127, 
  /* [2][0][][] */ -22,36,-55,20,37,12,-59,-49,127,-37,-21,-1,-26,82,-84,3, 
  /* [3][0][][] */ 19,-39,-28,-120,-22,-57,-16,3,127,-5,38,19,12,30,40,81, 
  /* [4][0][][] */ -75,45,-2,49,-2,-11,24,26,-2,-16,-1,-30,-127,-29,-25,16, 
  /* [5][0][][] */ -25,83,110,-5,19,51,-127,103,-9,56,-29,-45,45,-51,-89,-43, 
  /* [6][0][][] */ 34,-55,125,-127,40,-3,-35,57,-75,-124,40,-45,-7,93,-18,98, 
  /* [7][0][][] */ 34,127,-34,-69,93,2,19,-72,102,87,-29,5,21,-26,74,54, 
  /* [8][0][][] */ 18,-93,8,-81,10,-43,18,-78,11,49,88,-4,21,127,80,72, 
  /* [9][0][][] */ -9,-24,-21,105,31,-18,57,-33,-42,127,41,-31,2,-59,7,-18, 
  /* [10][0][][] */ 4,2,-46,-127,1,-8,3,-9,30,-26,15,-15,-12,3,5,37, 
  /* [11][0][][] */ 1,20,22,-13,84,-23,100,-56,-101,34,-7,33,-15,127,-93,-35, 
  /* [12][0][][] */ 81,-19,-127,-4,41,-55,35,28,13,72,-65,-32,-43,124,-22,31, 
  /* [13][0][][] */ -24,11,-29,10,1,-127,-12,26,8,-17,8,-4,10,-16,20,5, 
  /* [14][0][][] */ 23,-40,93,-40,65,-4,-127,-120,-2,-22,48,25,20,-62,-27,-34, 
  /* [15][0][][] */ -70,2,-30,-35,-21,37,127,71,-67,40,106,-14,15,80,92,13, 
  /* [16][0][][] */ 4,69,127,67,11,11,56,68,-59,23,-45,-18,30,3,16,-60, 
  /* [17][0][][] */ -37,-108,-15,33,-65,-15,-66,34,-127,-20,8,-42,-16,33,59,-53, 
  /* [18][0][][] */ -1,39,10,66,52,3,32,4,77,41,-7,-37,15,127,61,42, 
  /* [19][0][][] */ 6,-29,37,17,97,41,-127,-55,-98,-92,-7,-127,-28,-69,3,-62, 
  /* [20][0][][] */ 94,-31,-87,-36,-12,-122,25,37,-43,-12,-127,-26,48,-13,25,-18, 
  /* [21][0][][] */ 59,18,10,-70,3,-35,50,117,-12,-127,73,-21,0,97,112,83, 
  /* [22][0][][] */ -11,15,-21,127,-37,17,64,37,-9,38,-1,54,-14,1,4,-1, 
  /* [23][0][][] */ 72,-26,122,-80,54,-16,2,39,30,20,25,-11,10,-12,-127,43, 
  /* [24][0][][] */ -127,53,13,-25,4,89,21,-36,-5,15,80,-19,-65,29,62,-19, 
  /* [25][0][][] */ 31,21,16,27,16,14,67,-51,-9,-127,-18,-15,-15,-31,8,20, 
  /* [26][0][][] */ -35,-11,-1,1,-32,-30,-16,-44,-95,-19,14,-36,7,127,-34,77, 
  /* [27][0][][] */ -20,52,12,74,51,-35,-35,-22,78,-5,-26,-10,4,127,-5,12, 
  /* [28][0][][] */ 10,76,56,52,127,-8,21,47,-81,-7,-42,-38,32,85,51,-35, 
  /* [29][0][][] */ -3,11,7,25,42,13,-16,70,-15,-6,-17,-127,-1,-40,-16,-30, 
  /* [30][0][][] */ -21,86,-42,71,-22,-20,41,-127,-43,58,-12,-8,60,30,72,92, 
  /* [31][0][][] */ -35,-11,-20,-63,-18,-1,-33,-78,16,50,-24,-127,-15,-28,12,10, 
  /* [32][0][][] */ -127,-57,-21,46,31,29,-31,32,9,-42,-87,35,58,-11,66,42, 
  /* [33][0][][] */ -22,-26,-42,-15,-81,-13,-87,-1,63,9,-1,-65,18,-126,127,25, 
  /* [34][0][][] */ 47,-12,45,15,37,18,-39,122,-87,-12,107,19,12,-43,-7,127, 
  /* [35][0][][] */ -37,46,-80,13,-24,-6,26,-88,68,76,-70,-1,-1,-18,80,-127, 
  /* [36][0][][] */ -38,61,4,127,34,39,119,57,-16,28,-24,-18,4,17,-86,-49, 
  /* [37][0][][] */ -10,19,35,-63,34,-8,-57,-56,-75,-19,-20,-27,-2,-127,67,-54, 
  /* [38][0][][] */ 49,83,-18,-54,127,-4,38,-55,112,77,-15,-3,11,-20,48,25, 
  /* [39][0][][] */ -31,50,3,-127,1,20,-41,39,45,-68,-2,-15,16,81,39,34, 
  /* [40][0][][] */ 2,-42,-3,-51,-13,4,-9,-12,-101,-17,-21,-6,-1,-127,66,-91, 
  /* [41][0][][] */ -12,-15,-38,-16,9,-37,13,-11,-28,14,-57,-10,-127,12,26,25, 
  /* [42][0][][] */ 127,97,-26,-21,-56,-51,-34,-47,5,42,94,-56,-55,41,100,-95, 
  /* [43][0][][] */ 11,83,-51,11,73,-8,127,-60,20,105,-14,9,20,-100,-88,-12, 
  /* [44][0][][] */ -25,-6,7,-41,57,9,-107,-127,-20,-23,7,1,8,-44,83,-68, 
  /* [45][0][][] */ 11,41,-112,-45,52,-77,55,-127,-27,29,4,-91,24,8,42,19, 
  /* [46][0][][] */ 15,-10,-19,-82,-20,18,26,-22,-113,-33,24,15,-14,-127,74,-19, 
  /* [47][0][][] */ 18,54,25,-20,127,-21,-21,6,-57,37,-7,19,14,11,115,-33, 
  /* [48][0][][] */ -127,-72,-25,33,51,9,7,-25,11,-21,-118,42,62,17,77,40, 
  /* [49][0][][] */ 24,9,81,80,123,13,88,30,-127,-50,-37,-75,9,122,17,-68, 
  /* [50][0][][] */ 31,-19,-69,-12,54,-127,-36,-22,-26,-22,2,-43,26,-11,-17,32, 
  /* [51][0][][] */ 0,48,45,7,33,-5,-2,6,-117,44,8,-127,23,-111,-15,83, 
  /* [52][0][][] */ 1,53,1,43,33,-8,31,12,65,77,-37,-58,35,127,61,15, 
  /* [53][0][][] */ -13,-39,-28,-17,-86,-6,-76,2,40,11,2,-69,29,-127,122,9, 
  /* [54][0][][] */ 77,-27,-37,20,125,99,-127,-58,-108,-4,-36,-70,-2,-34,-39,-22, 
  /* [55][0][][] */ 45,-8,-3,2,26,-42,-58,-127,-31,-61,-67,14,-10,-25,16,-12, 
  /* [56][0][][] */ -24,23,17,-27,-11,-34,-101,66,0,127,-5,-24,37,-1,8,-5, 
  /* [57][0][][] */ -10,34,-38,-30,-45,-62,114,70,-30,14,-17,-15,32,19,127,-11, 
  /* [58][0][][] */ 42,25,-127,24,73,76,22,47,-81,-15,-1,9,-33,7,0,-33, 
  /* [59][0][][] */ -119,86,113,14,-79,-87,127,119,28,-2,22,-33,27,3,86,-9, 
  /* [60][0][][] */ 4,4,-60,-2,14,-127,-19,4,-7,-27,-10,-30,31,-21,0,1, 
  /* [61][0][][] */ 12,16,31,127,64,30,22,25,-117,12,2,23,-19,18,13,-53, 
  /* [62][0][][] */ -55,127,5,-57,-32,-10,-71,73,-21,-82,-84,-74,-13,-125,-43,-51, 
  /* [63][0][][] */ -35,18,-24,127,-74,16,-59,-38,-60,-23,-29,-28,20,65,29,29, 
  /* [64][0][][] */ -5,13,10,35,9,-3,-23,53,35,-2,-25,-64,-2,-127,67,-8, 
  /* [65][0][][] */ -30,-35,20,-114,41,-52,49,-42,10,41,2,-127,1,-8,42,-55, 
  /* [66][0][][] */ 11,9,59,-23,18,5,-48,127,27,-44,44,18,8,59,37,50, 
  /* [67][0][][] */ -12,65,-24,-127,-3,-12,-54,26,90,-97,-46,-20,46,69,71,19, 
  /* [68][0][][] */ -24,37,127,19,16,14,-14,-2,-45,-17,-24,-26,17,-16,63,-32, 
  /* [69][0][][] */ 118,101,-27,-12,-77,-50,-38,-29,20,6,86,-80,-57,47,92,-127, 
  /* [70][0][][] */ 38,10,-49,-7,-21,27,53,127,-27,93,-32,8,12,51,-33,15, 
  /* [71][0][][] */ 1,3,-6,8,1,-95,-11,17,-26,6,-84,3,-127,3,51,49, 
  /* [72][0][][] */ 14,15,-127,15,13,12,26,104,-34,-12,-4,-5,12,11,1,-16, 
  /* [73][0][][] */ -59,34,42,9,64,-30,-88,-127,24,-72,20,-24,12,-62,36,-41, 
  /* [74][0][][] */ 13,12,33,127,18,11,-56,76,-76,32,-24,52,8,-109,20,-80, 
  /* [75][0][][] */ -32,54,-44,14,21,-12,-1,7,127,11,-44,-23,-5,112,-19,-40, 
  /* [76][0][][] */ -1,-7,6,14,-2,-17,-16,55,9,-29,-24,-127,-2,9,11,19, 
  /* [77][0][][] */ -23,26,-22,122,-66,27,42,127,26,11,-1,37,-8,-34,17,-29, 
  /* [78][0][][] */ 9,0,26,-90,0,-13,-50,59,19,-54,9,-5,14,127,-3,49, 
  /* [79][0][][] */ -26,-74,-84,-63,-96,-3,6,-62,127,3,24,44,14,26,57,-64, 
  /* [80][0][][] */ -57,17,65,-115,19,-34,41,-37,-38,48,-20,-127,2,54,125,-77, 
  /* [81][0][][] */ -61,64,-127,43,79,-115,-33,64,-12,-60,60,-11,33,-12,19,-23, 
  /* [82][0][][] */ 106,8,-12,0,12,-127,-27,16,-9,4,-113,-19,94,-1,3,11, 
  /* [83][0][][] */ -16,62,-124,-79,-34,-14,69,-127,49,56,-51,-112,11,63,47,109, 
  /* [84][0][][] */ -52,62,84,-46,0,-33,27,-127,-26,43,-11,-64,40,60,79,-4, 
  /* [85][0][][] */ -85,127,46,-116,-80,-24,-49,-2,-63,3,-82,38,6,-5,-109,-47, 
  /* [86][0][][] */ -13,18,-34,-4,-14,-39,127,47,4,-25,4,5,5,34,94,-17, 
  /* [87][0][][] */ -17,-53,-5,-127,-2,-50,60,-37,-9,15,-19,-114,-5,40,0,-42, 
  /* [88][0][][] */ 83,-2,-9,-36,36,-118,11,82,-32,27,-103,-86,22,-9,127,-24, 
  /* [89][0][][] */ 21,-10,-39,-61,37,-30,-26,-27,-59,7,36,-87,127,5,34,-43, 
  /* [90][0][][] */ -10,-35,21,-64,51,-10,-75,70,63,-73,-35,-34,-3,89,34,-127, 
  /* [91][0][][] */ -46,3,-41,-63,17,-27,-13,-72,29,46,-9,-127,-15,-14,29,0, 
  /* [92][0][][] */ -31,32,40,15,8,-127,17,0,6,-29,-9,-21,8,-24,4,5, 
  /* [93][0][][] */ 56,-42,127,-5,-63,54,38,-45,-10,33,-81,3,-12,0,36,-4, 
  /* [94][0][][] */ 20,9,-18,-37,27,-12,-15,-16,-30,-37,23,-78,127,-16,45,-25, 
  /* [95][0][][] */ 127,64,2,43,-101,-10,-42,-30,-36,-16,69,-25,-31,39,53,-58, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0011507193557918072, 0.0014459156664088368, 0.0014316850574687123, 0.0011894578346982598, 0.00093384832143783569, 0.0012566610239446163, 0.00056415947619825602, 0.00083562469808384776, 0.00054545735474675894, 0.0015884558670222759, 0.000630827562417835, 0.00054501899285241961, 0.00099323049653321505, 0.0043945163488388062, 0.00085295474855229259, 0.00049381126882508397, 0.00059795321431010962, 0.00073382927803322673, 0.0014023620169609785, 0.00092407077318057418, 0.0004406146181281656, 0.0003143477370031178, 0.00081187521573156118, 0.00029547259327955544, 0.00060189410578459501, 0.0011996754910796881, 0.0016869972459971905, 0.00091118848649784923, 0.00080552604049444199, 0.00095812487415969372, 0.00052844680612906814, 0.0011768301483243704, 0.00072175392415374517, 0.0007226694724522531, 0.00098972860723733902, 0.00089352764189243317, 0.00061573361745104194, 0.00086844986071810126, 0.00081200577551499009, 0.0012279024813324213, 0.00061082548927515745, 0.0016022410709410906, 0.0012777099618688226, 0.00049245421541854739, 0.0015398525865748525, 0.00062337605049833655, 0.0010759090073406696, 0.00071323319571092725, 0.00093980209203436971, 0.00082024704897776246, 0.00096196040976792574, 0.00059887411771342158, 0.0019093154696747661, 0.00072137184906750917, 0.0011222214670851827, 0.0009488564683124423, 0.0012237699702382088, 0.0013605807907879353, 0.00092152180150151253, 0.00054474518401548266, 0.0030438422691076994, 0.0014288637321442366, 0.00048607931239530444, 0.00077724212314933538, 0.0013644864084199071, 0.00072035077027976513, 0.00043648231076076627, 0.0007252009236253798, 0.0012275433400645852, 0.0014484088169410825, 0.00082520971773192286, 0.00068724015727639198, 0.0017516061197966337, 0.0010076065082103014, 0.0010566649725660682, 0.00071346363984048367, 0.00071096239844337106, 0.00045988307101652026, 0.00046277150977402925, 0.00069727265508845448, 0.00049207353731617332, 0.00038954179035499692, 0.00056245730957016349, 0.00060670811217278242, 0.00028688678867183626, 0.00080139929195865989, 0.0022830739617347717, 0.00062201893888413906, 0.0004563927068375051, 0.0012706673005595803, 0.00099199905525892973, 0.00084352877456694841, 0.00089637027122080326, 0.0009786803275346756, 0.00097505399025976658, 0.00059661269187927246, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -5344, 20000, -14380, -3094, -3911, 7499, 24013, -53382, -562, 23554, 27308, 14793, -5901, 16910, -8901, 13759, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00069500913377851248, 0.0004563133988995105, 0.00025318324333056808, 0.00026297796284779906, 0.00038802230847068131, 0.00032471772283315659, 0.00043744625872932374, 0.00029163339058868587, 0.00026803035871125758, 0.00022645943681709468, 0.0007309450302273035, 0.00056814454728737473, 0.00039714129525236785, 0.00024872575886547565, 0.00044815073488280177, 0.0006067015347070992, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -30,-19,8,-33,14,1,-44,0,25,8,-4,11,5,-11,-35,6,11,-1,-3,-13,19,-29,11,-2,5,20,0,127,26,-28,40,-19,6,2,5,-5,-15,22,-40,-11,0,5,-1,37,7,15,21,14,37,12,-9,11,24,-26,-14,74,4,-5,-27,-34,-9,13,5,-26,-46,-59,-18,32,2,-2,11,-12,-11,-32,-22,-24,-27,10,9,1,-4,-24,29,26,-5,-23,-10,-93,9,-16,20,-13,46,-37,-34,-20, 
  /* [1][0][][] */ 35,-83,-69,-62,127,-5,83,53,-20,-100,-71,-12,-9,-7,-62,37,-59,2,41,50,59,23,-7,-38,2,-25,-16,-60,29,-44,-62,40,-8,23,1,1,13,-8,-1,36,-44,33,-27,-9,-27,81,10,0,7,-76,3,-19,-33,27,40,27,-59,1,-41,-40,46,8,0,-39,-75,106,-33,-14,-17,-10,-33,17,56,-102,-34,-19,37,-49,44,27,15,-36,10,30,-69,11,-26,37,15,-42,-1,21,21,10,22,89, 
  /* [2][0][][] */ -4,47,-74,17,83,116,59,116,-11,-121,16,-36,-32,5,37,2,21,-18,-52,65,68,-34,90,49,25,35,-23,-35,22,-17,78,-37,28,20,-7,39,-127,-78,30,102,5,-59,23,-29,11,-54,-3,43,-31,45,-36,1,103,-33,-30,79,19,30,19,7,24,37,18,-23,26,-1,-55,-5,-72,6,-50,-53,-44,-102,21,47,79,63,58,-16,41,-39,-1,-43,-65,-18,20,63,1,9,10,-14,-24,-23,-89,4, 
  /* [3][0][][] */ 49,20,93,30,36,-16,30,-27,-33,-88,35,-53,13,71,28,76,38,1,23,-8,127,-22,37,18,34,-16,-3,27,17,14,1,107,-77,19,36,10,-9,-24,-20,85,-30,-28,57,14,48,8,-26,-91,-61,3,-57,36,15,-112,4,36,-105,96,49,24,2,115,-20,-30,21,48,-13,-28,21,-9,22,-32,37,-37,82,3,6,-17,51,41,-18,-79,16,7,-31,37,28,25,20,14,10,2,25,67,25,-9, 
  /* [4][0][][] */ 17,-23,21,-9,127,40,-7,-10,-51,-51,-34,-28,-68,24,-7,34,19,-69,-33,89,0,-5,35,-13,-20,2,5,-40,-5,-36,59,-27,86,-7,-23,-4,38,15,10,8,-49,-6,-39,-30,-14,-47,-15,15,13,9,-25,15,-8,-39,-5,-21,18,-9,-47,26,-8,53,63,33,43,53,-20,-11,-45,10,36,68,16,-70,-39,-48,17,41,84,-36,-18,-42,1,5,-66,-16,45,48,-39,20,-8,-47,-2,17,14,-32, 
  /* [5][0][][] */ -4,-3,-12,28,18,-9,35,-33,-11,-34,5,9,16,24,-2,10,11,1,20,-26,25,12,-42,59,5,14,8,-91,2,45,28,21,-4,10,14,-48,23,25,-10,25,15,-9,27,-23,-8,-13,14,-20,9,6,6,-12,14,-37,4,-49,-11,27,-19,11,69,25,2,32,-12,42,4,84,1,84,19,38,3,10,-23,83,-37,-20,15,13,-2,-4,17,17,2,12,-15,127,5,39,-5,-29,7,7,-66,29, 
  /* [6][0][][] */ 12,-64,3,-36,-23,16,26,20,9,2,-2,-62,-13,15,-30,28,24,-13,0,-5,-33,39,6,-6,-5,0,-10,-10,-2,20,21,-31,54,22,47,-5,-13,-19,7,-110,0,71,1,-25,0,-23,-13,41,-2,42,-30,52,-26,-44,-20,-8,7,-49,6,6,-15,59,40,-78,16,-33,-1,-12,-3,-12,127,1,-42,-2,-32,23,-70,-21,15,3,25,35,37,-3,-16,0,34,15,4,16,41,-47,-15,-17,-22,-9, 
  /* [7][0][][] */ 12,127,34,8,85,45,77,-28,-30,-46,31,-15,-19,1,35,24,15,-22,-1,18,-19,-33,23,17,1,13,17,1,15,-13,26,13,38,13,-46,14,14,-3,9,112,-18,30,18,31,-29,-38,14,-17,-23,-8,42,5,0,-32,-14,43,46,41,-20,4,-6,-12,-11,4,-47,68,-26,-62,-17,-26,17,70,-6,-24,-24,-2,56,69,36,-16,-35,-49,3,16,3,58,-6,-11,-39,22,-31,-36,-37,-24,24,-2, 
  /* [8][0][][] */ 9,-9,43,16,-126,-40,34,-40,29,103,39,35,-51,-8,39,3,-81,30,-4,24,-55,-11,-115,78,11,-42,49,-25,-7,4,-36,54,65,-12,-10,-7,-12,-25,28,7,-16,-35,47,6,-56,14,30,13,-127,-5,34,8,-76,-28,-25,41,39,-83,-101,-17,8,-63,-40,-6,5,101,-9,-59,3,-8,-51,-42,53,60,76,-32,-18,-36,-15,15,-95,-2,-46,-31,12,28,68,46,18,-61,47,75,-11,17,59,9, 
  /* [9][0][][] */ 0,-125,-28,4,98,75,-53,-38,62,-30,100,127,-32,-23,112,-104,20,-34,-18,13,-66,-50,36,-7,-18,-1,-24,23,-16,9,-2,-59,6,10,-125,23,-2,7,-13,19,27,-90,-14,62,-29,11,-87,4,18,17,-10,-91,57,33,-25,-64,6,87,-12,16,29,-62,-36,124,-85,-13,3,-48,-18,37,-42,-102,55,-1,-76,23,71,-61,30,3,-8,-25,-7,35,-14,-79,24,-7,-3,-32,-49,46,-82,8,-5,-63, 
  /* [10][0][][] */ -56,-32,-27,-43,-21,3,62,-14,43,24,31,32,37,-16,-15,-7,-7,17,-28,-23,-5,30,26,8,-14,-1,4,-127,22,-25,46,-53,2,11,0,-11,-10,37,3,-5,14,-33,23,-48,16,-1,25,27,3,34,-31,-15,-30,-28,-1,-52,13,6,-5,-38,23,-3,6,7,-37,90,-8,-22,6,-41,-8,-17,-33,-8,9,38,-2,29,-13,12,-19,6,27,36,5,-39,-8,121,-3,-10,32,9,15,-38,44,-39, 
  /* [11][0][][] */ -99,33,2,24,1,-52,-20,-14,-46,-6,24,6,49,33,-26,-7,63,5,-60,-61,10,-2,-15,-6,67,24,65,6,-21,33,-25,16,-10,30,0,5,-18,3,16,23,10,-2,-1,3,74,-2,76,5,57,59,-10,20,32,-67,24,-3,-79,-9,-27,-44,-17,-8,-15,11,-16,-34,27,12,17,-4,-3,39,-33,10,28,8,-28,73,-108,57,-25,-11,-56,-92,127,23,40,-18,15,55,-27,-73,-20,35,-28,7, 
  /* [12][0][][] */ -6,-14,-33,2,63,8,-8,-23,-10,24,3,7,-9,-28,28,-23,-43,-3,8,-5,-9,-25,-28,42,-32,38,-39,85,-22,30,-47,-3,-20,17,10,17,-13,-15,12,17,-23,-10,-7,-7,-22,5,16,44,-11,-19,6,-26,-32,10,-18,-21,-5,-24,10,24,-18,-37,3,42,39,-68,15,55,-40,-127,-18,41,3,6,16,83,12,-6,3,-1,-5,23,-27,-3,1,-37,4,-43,-5,0,20,7,-46,40,-10,16, 
  /* [13][0][][] */ -83,54,0,7,-64,15,-22,13,-36,-43,50,40,73,39,-20,-30,-11,41,-32,15,50,-55,59,-68,46,39,-12,4,-7,-15,-58,-108,-89,-28,8,-1,-3,1,30,-12,-34,93,-7,30,47,-3,-3,46,66,-12,42,47,45,-51,56,-17,-11,37,28,10,-9,16,-17,3,-9,-15,15,-15,-1,5,20,-127,11,-19,-34,26,70,48,-28,-48,83,-26,13,-64,10,-57,89,-4,-25,-24,-5,26,15,-39,-5,27, 
  /* [14][0][][] */ -16,20,-29,-74,52,-19,5,22,-102,-16,-2,21,-64,-70,-76,-28,-126,-9,76,46,28,-4,10,-114,-31,-10,-55,-36,6,-36,-29,-37,-79,-31,17,19,-2,-3,26,-19,-20,95,-73,-16,-71,45,-8,57,125,-56,51,-22,6,84,-106,12,-6,31,-127,23,23,18,62,23,20,48,-1,-5,-58,30,75,34,53,-8,-26,13,78,-72,-36,-97,11,-48,4,65,22,-70,-44,3,-60,17,59,72,13,52,41,-22, 
  /* [15][0][][] */ -45,-77,-16,-29,-2,22,-34,-47,-12,3,19,-25,38,-36,49,-26,-70,-4,-4,17,-11,0,-64,-49,-38,3,-8,16,-22,3,57,-101,-10,-3,8,-9,-13,23,-93,-40,33,-60,-12,34,-39,-24,50,57,55,26,-16,-127,12,56,-13,35,36,-33,-26,49,-1,-21,47,-7,-3,-7,-7,-15,-20,4,3,28,-45,7,-5,-53,-37,0,12,3,-8,40,9,35,-13,-56,-43,-30,-28,46,37,80,-37,15,15,-4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.029537886381149292, 0.019393319264054298, 0.010760287754237652, 0.011176562868058681, 0.01649094745516777, 0.013800502754747868, 0.018591465428471565, 0.012394418939948082, 0.011391289532184601, 0.0096245259046554565, 0.031065164133906364, 0.024146143347024918, 0.016878504306077957, 0.010570844635367393, 0.019046405330300331, 0.025784814730286598, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 20630, 65549, -2395, -1668, 17584, -5195, -680, -471, 5756, 20238, -3673, -284, 450, 4109, 5019, -9791, -3813, -1018, 654, 12611, -11094, 16297, -2224, 11829, 14787, -173, -6401, 16712, 12991, -19768, 671, 23601, 24314, -10683, 1242, 945, -89, -153, 3396, -5812, -6703, 203, -5742, 94, 29382, -1423, 12869, -461, -15801, 2103, -126, 12, -3942, 17975, -4626, 15189, 25272, 148, 37127, -83, -9252, -1179, 1028, -544, -1943, 13234, -823, -4312, -2553, 4098, 397, -4483, 1157, 17, -1626, -5648, -1700, -1683, 37811, -9038, -5889, -12267, -213, 163, 49006, -11103, -11990, -27533, -5641, 9147, -2087, 32297, -322, -2711, -2879, 1436, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00011356832692399621, 8.6929423559922725e-05, 0.0001262521545868367, 0.00020134949591010809, 0.00019695700029842556, 0.00015052728122100234, 7.6440795965027064e-05, 0.00011738877219613642, 0.00025378604186698794, 0.00011973959044553339, 0.0002376596094109118, 0.00012333349150139838, 0.00041850871639326215, 0.00021971508977003396, 0.00041653684456832707, 0.0001637415261939168, 0.00019711210916284472, 0.00013930574641562998, 0.00018808296590577811, 8.9935034338850528e-05, 7.0996087742969394e-05, 5.1992054068250582e-05, 0.00012980142491869628, 6.6583474108483642e-05, 7.1928057877812535e-05, 0.00010883286449825391, 0.00015253346646204591, 0.00018408213509246707, 6.4944091718643904e-05, 0.00047648377949371934, 0.00037385299219749868, 0.00035241316072642803, 0.00010381163883721456, 0.00016643601702526212, 0.00022687288583256304, 0.00047609626199118793, 0.0004199756367597729, 0.00022817090211901814, 0.00032292038667947054, 0.00012431835057213902, 0.00021070241928100586, 0.00020766252418980002, 0.00034912143019028008, 0.00011621070734690875, 0.00035190017661079764, 8.4736951976083219e-05, 0.00011122266732854769, 0.00036447794991545379, 0.00060963834403082728, 9.2238267825450748e-05, 0.00036024631117470562, 0.00018666948017198592, 0.0001265568716917187, 0.00015595278819091618, 0.00017476074572186917, 0.00011032175825675949, 0.00010952351294690743, 0.00037836778210476041, 3.6780897062271833e-05, 0.00019461367628537118, 0.00030639284523203969, 0.00032080357777886093, 0.00012159274047007784, 0.00013361652963794768, 0.00013182792463339865, 0.00013573838805314153, 0.0003143328067380935, 0.000508399389218539, 0.00021847372408956289, 8.6573760199826211e-05, 0.00019532445003278553, 9.9560224043671042e-05, 0.00035513821057975292, 0.0001824843930080533, 0.00043926510261371732, 0.00032850235584191978, 0.00013955828035250306, 8.4033039456699044e-05, 6.9145760789979249e-05, 0.0001448304537916556, 0.00018602462660055608, 0.00022642833937425166, 0.00015390741464216262, 0.00026467806310392916, 7.3584640631452203e-05, 0.00014382638619281352, 8.3847320638597012e-05, 0.00050235976232215762, 0.00027996706194244325, 0.00012809547479264438, 0.00040693121263757348, 3.594277222873643e-05, 0.00015063605678733438, 9.7384428954683244e-05, 0.00036764421383850276, 0.00029976479709148407, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-73,-9,127,21,72,81,-62,-12,-20,-17,-1,-31,2,36,3,-9,-45,28,21,23,-127,127,5,-84,9,49,-28,-127,-127,39,26,13,30,59,-20,-32,-11,31,-6,-10,26,-112,68,25,-64,38,45,-17,53,-25,18,5,-8,13,48,-90,-50,-57,-21,-10,2,10,38,66,-24,75,15,-9,18,19,127,22,22,26,-5,-9,15,127,-4,-15,14,-29,19,122,21,-71,-16,-2,-31,-14,-44,2,-25,-15,25, 127,-126,77,105,-44,127,44,-122,69,3,-19,127,127,-99,-13,16,12,127,127,-113,127,-79,79,70,-127,-111,-67,-34,-55,47,-61,-19,-91,56,-127,-86,-44,-15,-50,64,2,127,127,78,-52,-115,-111,-49,-15,-127,43,85,70,-32,44,83,-45,41,-79,-115,-45,-41,-62,66,71,-61,27,33,-82,35,-18,90,115,127,13,15,3,56,-33,52,66,127,127,-25,-9,76,-108,127,-124,-98,6,-127,-90,-127,-38,105, -72,-13,32,-81,14,-28,63,-9,80,-36,-29,20,-20,-1,-8,-12,-11,-16,6,-5,-16,-105,28,-2,-120,101,10,-56,116,49,-16,11,-1,14,14,-31,-10,33,19,14,26,11,-124,63,18,-20,36,15,-14,13,-20,7,-10,-1,-3,21,-65,6,-33,50,2,41,35,0,-7,-39,-31,25,9,3,-3,36,11,-25,-7,0,-10,-8,-86,3,-23,-24,-19,1,-107,10,-33,-22,-52,25,-24,-39,30,-27,-14,1, 
  /* [0][1][][] */ -63,-75,77,-34,-48,98,22,127,-51,-22,-1,-113,27,-116,78,31,-4,-60,-17,89,58,-72,50,48,-93,-11,127,-22,-25,64,126,-100,-127,96,-84,-58,-38,32,-27,117,-47,-28,-5,47,-46,127,-22,62,16,95,19,-3,15,-55,28,33,127,122,-67,-84,127,-31,-35,127,70,-36,-15,-1,127,41,127,99,-42,103,-6,12,16,13,-32,10,-45,127,-80,116,3,35,-50,31,77,-127,-31,-5,127,-68,-21,0, 65,127,58,-111,127,83,93,38,-127,127,127,-36,-64,-127,-127,127,127,-63,-125,-52,104,97,-124,127,-100,-85,-44,127,-127,110,-127,-127,-88,127,108,127,127,-127,-103,127,-63,-97,110,-127,-127,-37,-127,-127,127,-112,86,44,127,127,127,-127,99,-127,-127,127,19,-78,-127,-99,-127,127,-127,127,-125,-127,-107,-85,-127,-80,127,127,-127,127,-78,127,127,32,-42,-127,60,127,94,46,127,12,127,4,-69,34,127,-127, -52,-14,-49,41,-57,-102,37,-24,17,-35,-29,94,3,97,14,9,-7,66,-7,125,5,-88,-40,4,-73,108,-71,-20,-70,-20,19,-65,-74,39,7,-19,-30,45,-66,72,127,-4,-41,28,-39,-61,16,44,9,119,-13,8,-38,-73,6,20,97,2,1,21,-35,127,93,-51,-43,12,37,-12,-77,124,-17,-87,-2,-54,-19,-17,29,15,75,-32,-73,-40,57,14,-46,-12,70,23,14,61,-43,28,-44,96,-25,-4, 
  /* [0][2][][] */ -66,2,-1,-20,12,-46,71,23,55,-28,-36,-2,18,19,-26,0,-6,65,4,0,-55,-82,2,-10,-31,-54,35,-69,89,40,26,28,15,-7,-9,-47,-7,34,-2,2,-16,-9,-70,107,5,29,11,34,-14,-32,9,-20,21,-3,9,17,-69,23,-14,13,16,1,-22,-4,0,-45,-47,14,-31,14,27,33,15,-17,26,1,20,4,-77,-12,-9,-7,16,15,-127,6,15,-44,-60,-50,-28,-53,10,53,-17,-10, 119,35,-127,-35,-73,-26,40,30,-66,-31,-20,-105,-76,114,-13,40,4,-49,-12,-127,88,-51,-40,2,-111,127,-52,20,-36,-19,-8,-3,-64,18,31,4,-23,-28,127,61,11,-16,68,-32,-37,75,-68,-44,-32,-5,-127,-127,-50,-25,3,41,-65,-6,7,40,-8,-19,8,-46,-54,33,64,-24,115,110,-24,-69,12,-56,6,-1,102,3,50,21,12,-97,-52,3,4,6,127,39,-63,41,-19,-106,41,76,-8,23, -53,14,-15,27,15,-71,-127,4,-13,-7,-16,3,16,-22,18,0,-9,-15,2,16,-53,-75,15,0,11,-92,20,3,-52,-38,-6,18,41,-19,-4,-27,-37,4,42,-28,23,-3,-51,-34,4,65,23,15,-8,-1,11,-7,21,6,-2,-4,-60,-13,2,-36,-11,10,85,-10,34,-1,-2,26,1,5,-3,21,-17,16,0,11,38,0,74,-10,1,-5,-8,-18,76,3,42,-39,58,41,-17,-50,-8,1,-13,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0048266537487506866, 0.0036945005413144827, 0.0053657162934541702, 0.0085573531687259674, 0.0083706723526120186, 0.0063974093645811081, 0.003248733701184392, 0.0049890228547155857, 0.010785906575620174, 0.0050889323465526104, 0.010100533254444599, 0.0052416734397411346, 0.017786620184779167, 0.0093378908932209015, 0.017702816054224968, 0.0069590145722031593, 0.0083772642537951469, 0.0059204939752817154, 0.0079935258254408836, 0.0038222388830035925, 0.0030173338018357754, 0.002209662226960063, 0.0055165602825582027, 0.0028297975659370422, 0.0030569422524422407, 0.004625396803021431, 0.0064826719462871552, 0.0078234905377030373, 0.0027601236943155527, 0.020250560715794563, 0.015888752415776253, 0.014977559447288513, 0.0044119944795966148, 0.0070735304616391659, 0.0096420971676707268, 0.020234091207385063, 0.017848964780569077, 0.0096972631290555, 0.013724115677177906, 0.0052835298702120781, 0.008954852819442749, 0.008825656957924366, 0.014837660826742649, 0.0049389549531042576, 0.014955757185816765, 0.0036013203207403421, 0.0047269631177186966, 0.015490313060581684, 0.025909628719091415, 0.0039201262407004833, 0.015310468152165413, 0.0079334527254104614, 0.0053786667995154858, 0.0066279936581850052, 0.0074273315258324146, 0.004688674584031105, 0.004654749296605587, 0.016080630943179131, 0.0015631880378350616, 0.0082710813730955124, 0.013021695427596569, 0.0136341517791152, 0.0051676915027201176, 0.0056787026114761829, 0.0056026866659522057, 0.0057688811793923378, 0.013359144330024719, 0.021606972441077232, 0.0092851333320140839, 0.0036793847102671862, 0.0083012888208031654, 0.0042313095182180405, 0.015093374066054821, 0.0077555864118039608, 0.018668767064809799, 0.013961349613964558, 0.0059312265366315842, 0.0035714041441679001, 0.0029386947862803936, 0.0061552939005196095, 0.0079060466960072517, 0.0096232043579220772, 0.006541064940392971, 0.011248817667365074, 0.0031273472122848034, 0.0061126211658120155, 0.0035635109525173903, 0.021350288763642311, 0.011898599565029144, 0.0054440577514469624, 0.017294576391577721, 0.0015275678597390652, 0.006402031984180212, 0.0041388380341231823, 0.0156248789280653, 0.012740003876388073, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1237, 5456, 16026, 17040, 11723, -3152, -2011, 5182, 24441, -2492, 8475, 3076, 7799, 15400, 23954, 1416, 2289, 6536, 10278, 5318, -204, 269, 10332, -1086, 5290, -11, 10744, 7567, 6190, 31253, 34899, 24353, 9064, -700, 10770, 2894, 1568, 4026, 19858, -1020, 10505, 8386, 33129, -2095, 30479, 4792, 6439, 14664, 36515, 9070, -554, 7494, -2872, -195, -1542, 5143, -319, 7841, 5495, 9111, 5056, 10746, 5936, 4512, 9575, 10723, 5015, -4287, 5665, -2957, 3823, 7285, 27210, 3031, -3999, -4785, 5264, 386, 2673, -1266, 13288, 13611, 3536, 8696, 3232, 166, 8445, 74940, 9550, 11628, 5038, -85, 5366, 6028, 6129, 16681, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00031889439560472965, 0.00026587324100546539, 0.00011752297723433003, 0.00013446985394693911, 0.00025816628476604819, 0.00031876628054305911, 0.0004095911281183362, 0.00031283005955629051, 9.5979128673207015e-05, 0.00054236955475062132, 0.00031431613024324179, 0.00027630882686935365, 0.00016039579350035638, 0.0001468981645302847, 9.9117736681364477e-05, 0.00042394411866553128, 0.00020076528016943485, 0.0001903538650367409, 0.00022170667944010347, 0.00022830709349364042, 0.00038105461862869561, 0.00078119838144630194, 0.00019521269132383168, 0.00057912420015782118, 0.00048348336713388562, 0.00045464604045264423, 0.00020627024059649557, 0.00018843046564143151, 0.00025454245042055845, 0.00011220663145650178, 8.1895595940295607e-05, 0.00010832855332409963, 0.00018266211554873735, 0.00028762759757228196, 0.00018616789020597935, 0.0002086752065224573, 0.00033236647141166031, 0.00036366633139550686, 0.00013736823166254908, 0.00074151885928586125, 0.00017879690858535469, 0.00019350227375980467, 8.2476770330686122e-05, 0.00053013209253549576, 0.00010616023791953921, 0.00031020882306620479, 0.00026429526042193174, 0.00018447077309247106, 0.00011198048014193773, 0.00022980124049354345, 0.00023067973961587995, 0.00022845786588732153, 0.00037790104397572577, 0.00028164687682874501, 0.00064913189271464944, 0.00022073538275435567, 0.00023110021720640361, 0.00023412689915858209, 0.00036491165519692004, 0.00016284803859889507, 0.00031224897247739136, 0.00012673053424805403, 0.00023739144671708345, 0.00022247340530157089, 0.000260754837654531, 0.00017828252748586237, 0.00025510331033729017, 0.00030469027115032077, 0.00029631299548782408, 0.00023687820066697896, 0.00029453210299834609, 0.00021557367290370166, 7.6273354352451861e-05, 0.00032588871545158327, 0.00038934111944399774, 0.00028841078164987266, 0.00031082596979103982, 0.00033898651599884033, 0.00028398461290635169, 0.00027820825926028192, 0.00015663208614569157, 0.00012136031728005037, 0.000257966632489115, 0.00021643213403876871, 0.00035052181920036674, 0.000353453797288239, 0.00027623926871456206, 5.1386559789534658e-05, 0.00015093419642653316, 0.00019509885169100016, 0.00024745016708038747, 0.00046916265273466706, 0.00027853975188918412, 0.0002684118808247149, 0.00017928126908373088, 0.00010355938866268843, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 2,78,-3,80,43,43,5,-67,64,37,-90,114,-50,-97,46,-127, 
  /* [1][0][][] */ 28,36,17,-22,15,-2,126,-127,-7,93,-5,-30,-32,-54,39,-2, 
  /* [2][0][][] */ -97,29,-29,-4,-4,-8,27,127,-41,51,89,9,-78,27,21,-51, 
  /* [3][0][][] */ -78,76,45,53,-38,26,65,127,39,73,-101,18,82,-63,-85,-3, 
  /* [4][0][][] */ 2,-13,34,61,-32,57,9,38,20,-15,-3,-12,14,3,-127,-16, 
  /* [5][0][][] */ -11,-14,65,-23,12,-26,-10,18,-66,74,-43,-127,-19,22,-53,-29, 
  /* [6][0][][] */ 15,11,44,-20,41,55,-81,-100,4,-5,43,-13,127,-9,-19,-20, 
  /* [7][0][][] */ 18,17,127,-20,-24,-37,11,9,-73,12,-66,-65,24,-17,45,-11, 
  /* [8][0][][] */ 28,67,60,66,-91,99,22,37,36,10,15,-86,-17,4,-127,-97, 
  /* [9][0][][] */ 43,-70,34,52,11,7,3,20,70,41,60,19,-28,6,-127,-5, 
  /* [10][0][][] */ -31,-74,-14,-19,-71,0,-26,54,108,127,37,-5,-45,63,66,6, 
  /* [11][0][][] */ 67,0,5,-104,19,-37,-127,-122,-47,66,-28,-35,34,-3,73,-52, 
  /* [12][0][][] */ 9,7,12,-27,-50,-21,-82,-19,-78,-56,-10,28,21,127,51,43, 
  /* [13][0][][] */ 23,-125,-17,57,23,-40,43,-74,53,-22,-48,10,44,71,127,49, 
  /* [14][0][][] */ -2,-59,73,45,22,48,-12,127,13,66,-23,-36,29,55,-96,123, 
  /* [15][0][][] */ 26,-35,8,68,17,-1,89,9,0,-127,12,-29,-5,-27,-9,-36, 
  /* [16][0][][] */ 13,-55,-7,6,-14,-25,18,-55,127,50,92,-12,6,82,72,110, 
  /* [17][0][][] */ -119,-75,94,99,127,91,15,7,123,-67,-12,-54,22,42,-116,61, 
  /* [18][0][][] */ -23,37,2,16,-106,-25,4,27,-36,-9,-39,-56,-15,-127,85,-39, 
  /* [19][0][][] */ 32,-92,21,-68,39,8,-121,106,127,-108,93,2,9,10,75,89, 
  /* [20][0][][] */ 17,18,77,-84,-14,-9,-49,78,5,-59,127,-33,-15,-9,-28,113, 
  /* [21][0][][] */ -89,-2,5,-38,11,11,-81,-42,-23,45,-8,2,-127,-20,20,-6, 
  /* [22][0][][] */ 30,-16,23,-30,19,-68,7,-8,-127,38,6,-58,-20,-23,65,-23, 
  /* [23][0][][] */ 21,5,17,-1,8,8,-10,8,-5,2,50,-8,127,-4,5,-35, 
  /* [24][0][][] */ -23,10,-20,-87,-23,-35,76,27,-34,24,15,-127,13,-121,51,-3, 
  /* [25][0][][] */ -127,23,-11,7,55,-18,-67,-125,-31,10,-51,-58,-45,-67,20,8, 
  /* [26][0][][] */ 62,34,41,-127,102,-57,-2,24,116,-72,27,-40,-14,106,-5,97, 
  /* [27][0][][] */ 89,-24,22,-29,-28,-51,-3,-17,-28,17,-127,13,12,-16,1,43, 
  /* [28][0][][] */ -112,-12,-127,-83,50,-22,60,-69,-4,44,-57,7,63,-33,-34,24, 
  /* [29][0][][] */ -121,-14,-73,103,-27,-21,20,-74,25,27,-58,38,-13,-127,68,-92, 
  /* [30][0][][] */ 57,19,127,-4,36,46,-28,59,-29,-63,18,-44,-25,18,-67,49, 
  /* [31][0][][] */ 43,-127,10,-33,7,-41,27,-89,-21,67,95,43,-27,127,52,123, 
  /* [32][0][][] */ -23,78,-37,31,-127,18,-73,-43,-53,-44,6,42,3,43,41,48, 
  /* [33][0][][] */ 17,-15,26,127,9,-9,21,-56,-122,53,67,-45,4,-8,18,110, 
  /* [34][0][][] */ 27,8,4,-29,114,-65,-125,-30,-84,127,-55,8,-64,-52,-9,-1, 
  /* [35][0][][] */ 84,6,-16,-4,30,-127,-34,-19,-10,4,-78,6,85,37,18,36, 
  /* [36][0][][] */ 26,-11,-127,6,53,20,-30,24,-40,-12,12,-3,3,20,-30,28, 
  /* [37][0][][] */ 6,12,127,-4,-61,31,20,-54,-19,35,-48,33,13,-12,22,-14, 
  /* [38][0][][] */ -112,17,-2,22,25,63,18,-27,13,-5,127,-22,-33,12,1,-33, 
  /* [39][0][][] */ -24,22,9,35,19,-18,-127,54,5,30,-5,-39,1,-27,7,-12, 
  /* [40][0][][] */ 27,62,-43,127,16,35,70,47,-77,-22,-24,75,21,43,-69,-43, 
  /* [41][0][][] */ 13,54,-34,-33,-84,-1,123,127,-48,83,-73,-6,-41,96,71,-26, 
  /* [42][0][][] */ 9,-26,-20,-29,8,6,-79,66,104,-123,127,35,-14,76,-54,50, 
  /* [43][0][][] */ -55,11,27,-28,20,8,-59,-72,-28,54,-12,-4,-127,0,16,-27, 
  /* [44][0][][] */ 19,-14,-7,-2,-3,-10,6,-55,127,-12,8,56,18,97,-13,65, 
  /* [45][0][][] */ -46,-80,10,-91,39,-3,-11,28,-22,-60,13,-20,28,100,-28,127, 
  /* [46][0][][] */ -36,29,-23,95,-68,-13,8,-70,-127,29,-62,-4,-19,39,-6,-45, 
  /* [47][0][][] */ -14,-69,-108,127,-25,59,-17,-53,53,57,82,66,-2,-22,67,-8, 
  /* [48][0][][] */ -8,1,-5,-127,7,-49,9,-16,-42,7,8,-29,-10,34,80,8, 
  /* [49][0][][] */ -42,10,49,83,28,38,-61,9,52,-71,-127,-55,-53,-51,-114,-58, 
  /* [50][0][][] */ 0,84,6,-99,65,19,-8,29,127,-27,-53,1,32,-34,28,-37, 
  /* [51][0][][] */ 4,-20,18,-18,28,-32,-56,-127,12,-72,-16,-9,-6,2,-21,34, 
  /* [52][0][][] */ -2,16,-31,6,47,-41,-62,96,-40,127,-4,-43,86,72,10,-56, 
  /* [53][0][][] */ -19,127,15,-83,-10,-3,37,-10,-51,-77,-78,43,7,-120,-100,-25, 
  /* [54][0][][] */ -13,13,15,19,41,-28,16,-22,0,40,1,-29,-7,127,-41,-12, 
  /* [55][0][][] */ -70,127,67,-11,32,-1,-27,-13,-22,26,80,-7,-12,-26,99,-9, 
  /* [56][0][][] */ 47,-37,-17,-127,57,-26,7,4,51,-52,34,93,-7,-7,122,24, 
  /* [57][0][][] */ 1,3,3,87,5,29,46,127,-31,14,45,-32,-15,43,26,12, 
  /* [58][0][][] */ 19,127,-15,-122,13,28,15,12,103,5,-13,76,-2,-81,21,54, 
  /* [59][0][][] */ 35,67,44,-127,-63,-18,35,4,19,16,23,-61,0,-122,-90,0, 
  /* [60][0][][] */ 58,-11,121,-35,-23,127,27,-42,-9,26,-52,-11,22,17,39,-9, 
  /* [61][0][][] */ -59,45,-15,-5,-49,39,84,127,-26,30,-43,7,-6,53,0,-48, 
  /* [62][0][][] */ 17,-69,10,21,-85,112,-38,-51,-84,37,24,15,34,-127,77,97, 
  /* [63][0][][] */ 17,-40,-19,-85,48,-4,-101,-127,-53,103,-33,9,55,10,38,-40, 
  /* [64][0][][] */ -23,-18,30,43,80,-14,-31,-127,27,-94,10,-39,8,-23,-5,15, 
  /* [65][0][][] */ -127,27,27,-76,15,81,54,-50,-100,32,38,-13,6,17,-34,-29, 
  /* [66][0][][] */ 98,2,127,39,-72,2,-32,71,-81,-7,60,-95,-20,76,-100,-8, 
  /* [67][0][][] */ 74,-13,-75,52,58,-73,-56,-66,72,-81,-82,-46,-127,-18,-92,7, 
  /* [68][0][][] */ -11,-24,-61,40,-37,-91,12,-62,-49,-28,66,-73,-3,63,127,-4, 
  /* [69][0][][] */ -27,25,-75,70,-3,-127,73,94,62,39,76,-8,112,48,-44,-1, 
  /* [70][0][][] */ 30,-17,-36,-18,-31,13,127,65,-13,80,2,15,-7,48,24,24, 
  /* [71][0][][] */ 39,-34,-18,-22,31,5,6,58,-24,-50,-16,7,32,-127,70,41, 
  /* [72][0][][] */ 42,15,6,37,32,-36,-63,-127,20,45,-76,19,29,48,35,65, 
  /* [73][0][][] */ -56,-127,-8,-50,-75,-9,15,-17,-15,-9,-76,7,13,-29,48,9, 
  /* [74][0][][] */ -33,28,50,89,-12,2,-127,107,23,-14,-31,-46,12,-8,-16,-32, 
  /* [75][0][][] */ -65,41,-51,-16,-10,47,33,127,11,34,5,-56,-105,31,53,42, 
  /* [76][0][][] */ -3,-23,-26,-19,44,-70,-127,-104,-19,-23,37,-6,34,6,76,-40, 
  /* [77][0][][] */ -33,-2,-26,-16,-40,-1,-29,-39,127,18,-44,20,-8,44,22,-65, 
  /* [78][0][][] */ -127,-103,-18,80,52,53,-38,43,-11,-100,-114,47,81,-52,126,48, 
  /* [79][0][][] */ 31,-16,53,-61,127,-4,47,2,106,32,17,32,24,-25,25,-47, 
  /* [80][0][][] */ 3,-47,68,-107,-5,-42,-6,31,-88,-69,-27,-49,-9,127,-32,34, 
  /* [81][0][][] */ 3,9,79,54,-4,78,-67,6,19,-60,2,-73,0,21,-127,30, 
  /* [82][0][][] */ -39,-76,24,-103,28,-24,18,-98,-16,-26,-35,-127,34,-119,-99,17, 
  /* [83][0][][] */ 18,-27,-12,-39,-85,-8,-3,-4,-60,20,35,-91,22,-127,1,67, 
  /* [84][0][][] */ 127,47,21,81,-69,2,-73,3,-18,-36,126,-2,-70,29,100,-95, 
  /* [85][0][][] */ -6,-21,18,-19,40,0,-46,127,-79,-88,-34,-17,-22,61,63,-99, 
  /* [86][0][][] */ 34,13,6,-1,-58,65,-47,27,-72,-54,18,-14,-27,-127,-17,44, 
  /* [87][0][][] */ 127,-36,13,-9,-33,-43,1,-3,20,24,-101,4,47,-10,14,27, 
  /* [88][0][][] */ 48,101,-14,20,-7,-19,-47,-24,127,31,-9,54,-16,-3,119,-109, 
  /* [89][0][][] */ 18,47,-74,-2,16,8,44,-69,21,57,22,-5,-32,-2,-33,-127, 
  /* [90][0][][] */ -39,7,5,-73,-29,26,127,-37,58,-77,-9,-80,22,-26,-77,-16, 
  /* [91][0][][] */ 9,-2,10,-77,-30,10,23,-56,-78,41,88,82,10,-1,41,127, 
  /* [92][0][][] */ 14,34,13,-5,50,-27,-74,-127,51,-57,3,-23,-44,-3,28,-32, 
  /* [93][0][][] */ 82,-10,37,-127,-64,-3,-16,54,67,-91,83,-30,-72,126,-28,-2, 
  /* [94][0][][] */ -127,82,-90,6,59,-110,-12,20,-20,-70,62,-61,-21,-18,-64,-34, 
  /* [95][0][][] */ -37,85,34,-127,-39,7,-78,12,53,-82,-122,-80,-20,66,-79,-48, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00093406991800293326, 0.00077876629075035453, 0.00034423521719872952, 0.00039387412834912539, 0.00075619190465658903, 0.00093369471142068505, 0.001199728692881763, 0.00091630697716027498, 0.00028113136067986488, 0.0015886484179645777, 0.00092065974604338408, 0.00080933305434882641, 0.00046981347259134054, 0.00043027772335335612, 0.00029032462043687701, 0.0012417698744684458, 0.00058805930893868208, 0.00055756332585588098, 0.00064939848380163312, 0.00066873169271275401, 0.0011161427246406674, 0.0022881992626935244, 0.0005717952735722065, 0.0016963060479611158, 0.0014161656145006418, 0.0013316984986886382, 0.00060418382054194808, 0.00055192952277138829, 0.00074557738844305277, 0.00032866315450519323, 0.00023987946042325348, 0.00031730392947793007, 0.00053503352683037519, 0.00084248674102127552, 0.00054530223133042455, 0.00061122816987335682, 0.00097353087039664388, 0.0010652109049260616, 0.00040236371569335461, 0.0021719743963330984, 0.00052371196215972304, 0.00056678528198972344, 0.00024158177257049829, 0.0015528039075434208, 0.00031095274607650936, 0.00090862909564748406, 0.00077414419502019882, 0.00054033123888075352, 0.00032800075132399797, 0.0006731082103215158, 0.00067568139638751745, 0.00066917331423610449, 0.0011069056345149875, 0.00082496862160041928, 0.0019013647688552737, 0.00064655346795916557, 0.00067691301228478551, 0.00068577844649553299, 0.001068858546204865, 0.00047699632705189288, 0.00091460486873984337, 0.00037120495107956231, 0.00069534056819975376, 0.00065164430998265743, 0.0007637740345671773, 0.00052220531506463885, 0.00074722018325701356, 0.00089246477000415325, 0.00086792698130011559, 0.00069383723894134164, 0.00086271064355969429, 0.00063143437728285789, 0.00022341140720527619, 0.00095455691916868091, 0.0011404146207496524, 0.00084478076314553618, 0.00091043679276481271, 0.00099292153026908636, 0.00083181611262261868, 0.00081489660078659654, 0.00045878926175646484, 0.00035547511652112007, 0.00075560709228739142, 0.00063394889002665877, 0.0010267094476148486, 0.0010352975223213434, 0.00080912926932796836, 0.00015051578520797193, 0.00044209961197338998, 0.00057146180188283324, 0.00072480348171666265, 0.0013742189621552825, 0.000815867620985955, 0.00078620220301672816, 0.0005251307156868279, 0.00030333461472764611, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3699, -2395, -10453, 26393, 25468, 183, -1662, -7544, 24757, -2787, 34678, 20515, -11601, 13084, 35451, -31202, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00042840419337153435, 0.00032966485014185309, 0.00030703851371072233, 0.00021752990141976625, 0.00036609184462577105, 0.00029075451311655343, 0.00030380190582945943, 0.0004329296643845737, 0.00020169661729596555, 0.00025133270537480712, 0.00033940584398806095, 0.00079657434253022075, 0.00044431546120904386, 0.00035316316643729806, 0.00048272631829604506, 0.00030922002042643726, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 6,4,-20,16,32,59,-36,-26,42,9,30,8,-13,15,30,72,-15,5,2,5,94,-47,19,-1,-22,-33,-40,-98,-2,-7,50,42,127,-2,-4,-12,11,-15,-3,2,-34,18,15,-40,-5,-26,-5,23,-24,13,9,5,-37,-18,6,-5,41,14,-24,-17,-60,39,-7,-6,29,14,64,15,10,26,0,-39,-62,6,-6,9,-4,-87,5,-33,31,-25,-67,-58,12,-12,-2,28,-23,7,28,-40,21,36,-9,115, 
  /* [1][0][][] */ 53,-100,36,67,15,-49,-19,-43,-9,-92,-12,20,11,-63,-24,-45,-59,-5,21,0,-13,-100,-48,1,127,-43,-56,17,-41,80,-11,36,-1,16,-42,39,-37,-11,19,-18,9,-76,62,-36,-28,-4,58,-10,46,30,-23,-59,54,-67,20,-26,2,28,0,-106,28,-67,7,-61,-20,-89,23,15,13,29,-44,-7,-75,9,-26,49,23,84,13,-15,27,1,-79,25,-38,62,14,61,-28,27,5,14,1,-51,28,6, 
  /* [2][0][][] */ 14,27,16,-42,23,-11,3,7,62,-8,33,78,0,21,68,6,-8,-10,-6,-1,-17,-70,4,-50,4,3,-18,46,-19,18,116,-42,20,-78,-18,41,13,127,-50,-22,-5,-42,-10,48,-35,-54,-78,24,25,11,-31,-35,38,0,-5,-17,-22,-6,-6,38,-16,6,69,67,34,-74,1,-88,6,-25,-29,35,-12,8,-34,17,17,48,-13,38,-7,90,7,-31,12,-10,19,32,16,46,-14,-58,-47,31,-10,82, 
  /* [3][0][][] */ -7,-3,-36,14,48,-25,-10,-5,-13,15,16,20,3,-11,36,-25,40,-32,-17,6,-27,-8,2,-2,-10,18,29,14,29,-33,56,-19,23,-37,-16,35,0,-11,-18,1,4,-47,21,-24,-6,-8,-11,4,-127,29,9,27,-115,-55,-6,-28,21,4,-5,47,3,43,38,23,-11,-75,-17,36,60,25,19,57,-29,2,-26,-40,-41,-47,35,-38,9,-1,-7,70,47,61,29,10,28,-13,0,6,-21,1,-12,-27, 
  /* [4][0][][] */ -9,-34,17,-62,1,-12,-36,1,-29,-41,-23,-15,10,61,5,-13,54,-21,0,11,11,29,33,-4,-14,5,11,18,-13,-13,-3,-7,-40,10,10,10,38,-17,-5,-3,24,14,-83,-29,32,-22,-22,-12,13,62,-21,-9,-26,-11,-2,8,-6,-27,9,18,3,4,-3,-10,35,-127,23,-29,-47,4,-26,-17,2,17,-20,32,-8,61,51,13,12,-2,119,-41,38,-17,-3,5,74,16,-12,28,-33,27,-9,-42, 
  /* [5][0][][] */ 0,6,-18,-3,5,-4,0,106,47,-7,-7,-17,-13,26,43,26,-12,-11,-17,-24,-34,-13,13,-28,-2,15,34,94,71,11,77,56,-39,10,8,-23,-38,-53,-37,-22,-36,-11,4,-1,55,1,2,4,-3,-1,0,18,-37,-23,22,0,-24,-20,1,41,-40,35,3,-32,31,34,-9,18,9,27,8,22,30,16,16,14,-1,22,19,110,6,-34,25,33,8,14,29,-22,8,-18,37,-127,-33,-9,-6,-117, 
  /* [6][0][][] */ -14,1,-4,-51,-13,-26,-15,10,18,-1,-26,-19,21,-49,-13,8,-12,-56,39,3,-1,-1,-9,9,76,-12,-18,-9,29,-3,22,-5,-24,-6,-6,14,22,5,27,29,-16,-10,-42,-17,-3,-11,25,-127,24,47,-8,-3,-8,-7,10,-47,30,-20,-15,-1,30,13,-2,21,6,49,32,-10,-10,3,9,-42,11,15,44,-21,-30,37,5,-14,-14,9,52,-23,-16,53,10,-45,30,-10,-25,-16,-30,-10,-3,-1, 
  /* [7][0][][] */ 11,10,40,-18,22,18,-9,-34,1,-12,-12,-10,-1,-95,29,18,13,-23,-29,0,26,-18,-53,-4,-32,-8,29,-16,-4,11,0,-12,-17,8,-19,-22,3,-13,-51,28,14,-24,-12,35,-14,13,-11,83,-3,22,-9,-12,-28,9,3,-52,30,11,22,7,-3,14,-13,-15,-5,40,15,-38,-14,-11,24,61,-8,-12,-3,10,41,4,9,-11,12,-23,43,3,-16,127,12,7,-37,-29,-7,37,-29,3,-7,15, 
  /* [8][0][][] */ -81,20,-55,24,12,-13,-13,4,3,80,-60,-17,15,33,75,-46,-1,31,-61,21,43,40,-42,11,-50,-31,-15,11,32,-80,-12,-3,17,9,9,-12,-7,31,-50,64,12,27,22,-127,-31,-14,34,-17,-40,7,20,71,-90,85,-6,15,0,-13,-25,-34,-6,-32,-10,40,-23,32,8,-32,-11,-17,47,70,-21,44,49,21,5,-107,-12,-27,-30,-12,53,-13,-85,-1,19,-35,19,40,-49,12,27,-24,-19,-11, 
  /* [9][0][][] */ 20,-53,-45,-24,8,28,-35,19,15,-13,14,27,-46,-32,18,6,8,1,47,-13,-22,11,-11,-43,37,-4,28,-31,-38,-35,-21,-10,-22,16,15,23,7,36,-42,23,11,6,-30,-89,0,-12,34,-114,-35,1,3,19,-4,9,-5,5,-45,20,-7,24,0,9,11,30,23,127,26,46,6,-2,-9,-43,-8,-9,-31,22,58,-12,-4,6,-7,5,26,-54,6,21,0,-6,-56,32,-26,-2,13,23,12,-14, 
  /* [10][0][][] */ 30,64,-38,15,68,-107,-7,-29,8,45,57,-6,-13,8,18,-78,12,41,-24,52,-81,-17,-1,-39,-81,-19,-57,60,-3,13,2,17,-7,-10,33,-15,82,-16,-3,-9,-12,72,49,-19,-72,-19,-49,-2,-23,-26,-47,2,-24,-12,-3,-11,-1,14,-44,-8,0,23,-23,16,21,57,51,33,29,18,28,32,-60,-6,-45,-13,-5,25,-20,8,26,1,-91,-43,64,-58,91,-21,-26,12,13,-18,84,39,-13,-127, 
  /* [11][0][][] */ 46,43,-38,13,-12,8,47,15,2,-14,-15,-7,-3,-2,29,3,-7,8,-96,-4,-9,15,16,-5,-49,-15,-12,10,7,19,2,-6,-3,-5,8,15,14,9,1,14,-1,32,51,-83,20,-33,-6,-7,-127,9,25,-32,20,14,-6,11,-15,-19,6,1,17,-9,-2,18,-39,60,-8,22,15,8,50,7,-40,-28,14,26,0,-29,-44,-10,14,7,74,44,-8,-4,-18,-14,6,15,-6,-8,-3,8,-18,6, 
  /* [12][0][][] */ -28,-12,5,4,-18,46,15,-6,127,8,-17,0,1,-1,-24,-30,39,32,12,55,58,23,-15,-19,15,1,20,-33,-88,5,33,-36,-2,0,-4,-25,17,2,32,-8,-39,-34,2,15,5,23,2,-7,19,-7,-48,7,15,-5,1,4,62,-20,0,9,10,-9,2,-18,-3,41,-53,-7,0,-10,-31,-30,16,15,-68,7,30,-5,3,-52,-16,12,45,33,-23,-14,-20,-14,8,22,-5,45,-10,-1,10,9, 
  /* [13][0][][] */ 28,11,-27,23,22,-3,11,-3,-6,8,17,-6,12,-15,18,-14,14,-74,-45,20,-14,-10,12,15,4,11,-14,5,-3,-33,-15,9,10,2,3,35,16,6,16,15,3,0,23,49,19,15,-18,-127,21,-7,9,6,-21,-2,8,8,-12,10,10,2,14,30,-3,8,4,-11,-12,-49,7,25,-14,-35,-10,44,-17,28,-19,5,7,-5,12,-12,-16,20,5,31,5,13,-9,-3,27,-8,2,19,-12,-14, 
  /* [14][0][][] */ -118,-60,35,62,17,-20,-34,20,-23,25,-12,9,73,5,-121,-4,73,-2,-2,33,-12,2,30,36,-120,-8,20,-29,-53,-67,-39,-11,-14,22,22,-68,29,38,-8,32,32,12,-7,-36,3,127,90,74,-106,49,18,30,-53,8,22,-25,-6,24,57,56,40,37,6,36,12,-5,-49,39,-6,70,-74,-100,-81,-6,4,48,-25,39,82,20,54,4,48,19,29,-1,47,22,4,27,61,-3,16,21,22,-15, 
  /* [15][0][][] */ 100,-7,45,3,-50,69,32,-22,-28,65,8,-7,-96,-19,9,31,-10,39,68,17,1,17,-68,83,23,-5,7,-14,19,49,-76,-84,19,-46,44,-22,35,-37,-26,-104,-14,26,-10,37,-22,55,-19,-37,114,-61,-57,9,47,-121,50,-125,-2,-86,-19,26,-127,3,21,41,98,-2,-62,66,-20,69,-25,-11,54,45,32,25,24,-63,62,-14,-26,3,43,84,-77,-21,-9,-60,-13,-5,81,-15,-74,71,32,-24, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018207177519798279, 0.014010755345225334, 0.013049136847257614, 0.0092450203374028206, 0.015558903105556965, 0.012357066385447979, 0.012911580502986908, 0.018399510532617569, 0.0085721062496304512, 0.010681639425456524, 0.014424747787415981, 0.0338544100522995, 0.018883407115936279, 0.015009433962404728, 0.020515868440270424, 0.013141850009560585, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11499, -9988, 4083, 49473, -1642, -4823, -9085, 1635, -2097, 752, 2660, -1714, -354, -4238, 7791, -4357, -1431, 16545, 28656, 2105, 1742, -3261, -407, -135, 13427, 360, -653, -3577, -5530, -8012, 5804, -9373, 104, -601, -786, 10452, 1223, -3565, 22344, -99, -1080, 2349, -8792, -7416, -6826, 66119, 206, 15859, 32736, -12708, -235, 10805, 7198, -604, -5604, 2225, -13323, 1700, 1796, -6631, -1678, -1037, -14378, -339, 1840, 17042, 32230, 21757, -12327, 504, -12230, -765, 32564, 11911, 163, 615, 17942, 30137, -1214, -7497, -2361, -4053, -433, -2857, 690, 2432, 675, -247, 1823, -3660, 407, 399, -156, 227, 44, 52185, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020272145047783852, 0.00010163614206248894, 0.00022569682914763689, 4.0683615225134417e-05, 0.00012145567598054186, 0.00013772773672826588, 0.00036267540417611599, 8.6047322838567197e-05, 0.00022732708021067083, 0.0004283828311599791, 0.00019912549760192633, 0.00030070723732933402, 9.8691474704537541e-05, 0.00043570544221438468, 0.00014055747305974364, 0.00019241451809648424, 9.0623703727032989e-05, 0.00029115506913512945, 5.4416268540080637e-05, 0.00028680454124696553, 5.3854862926527858e-05, 0.00018056790577247739, 0.00012893170060124248, 0.00036407544394023716, 0.00027500622672960162, 0.00027269232668913901, 0.00011881171667482704, 0.0001778784062480554, 0.00010301946167601272, 9.5457588031422347e-05, 0.00013180049427319318, 0.00013643295096699148, 0.00012762793630827218, 0.00018854637164622545, 0.00019249017350375652, 0.00022380823793355376, 0.00046470380038954318, 0.00012679708015639335, 5.5877600971143693e-05, 0.00012391938071232289, 0.0001880286872619763, 0.00033641757909208536, 0.00039145667687989771, 0.00015452221850864589, 0.0002164371544495225, 4.6117402234813198e-05, 0.00029357679886743426, 0.00022109194833319634, 7.8180819400586188e-05, 0.00017100412514992058, 0.00018559451564215124, 0.0001009755942504853, 0.0002311009302502498, 0.00029272664687596262, 0.00022700881527271122, 0.00037711337790824473, 0.00029892165912315249, 0.00025750519125722349, 0.00010901877976721153, 8.399337821174413e-05, 0.00030478273401968181, 0.00013611625763587654, 0.0002512357896193862, 0.0001150269599747844, 0.00019136695482302457, 0.00017588124319445342, 7.2946357249747962e-05, 8.2431353803258389e-05, 0.00030294840689748526, 0.00023368652909994125, 0.00017215144180227071, 0.00012276755296625197, 0.0001866364327725023, 0.00016361195594072342, 0.00026586782769300044, 0.00027048899210058153, 0.00047514541074633598, 5.67937022424303e-05, 0.00022200564853847027, 0.00025069134426303208, 0.00015354000788647681, 0.00052429235074669123, 0.00021715075126849115, 0.00011192656529601663, 0.00012791335757356137, 8.2930571807082742e-05, 0.00012729894660878927, 0.00019758193229790777, 0.00020135956583544612, 0.0001054134700098075, 0.00019287010945845395, 0.00011098542017862201, 0.00015402556164190173, 0.00044202792923897505, 0.02773275226354599, 7.477922918042168e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -20,11,-22,103,-18,23,-64,-54,18,-6,99,-11,4,-6,-4,54,4,16,-40,3,74,4,34,-33,3,18,41,48,22,13,25,47,-5,28,9,-16,5,48,-57,-23,22,9,25,21,-84,-56,26,-6,-11,-23,-8,-7,49,6,-10,2,-3,-36,25,-30,28,-2,127,24,-13,-13,9,-51,65,33,5,-2,76,-34,70,5,18,-127,31,63,-1,15,127,-15,37,28,-29,-20,36,-8,-12,82,1,21,-2,13, -51,14,-10,11,52,-9,-12,-127,37,14,-127,-5,-15,-11,5,97,19,-30,-15,-15,75,-95,127,26,-59,-30,-106,-17,28,36,-48,18,122,13,-12,-1,-23,127,-67,-127,10,-18,-29,13,47,-127,127,-46,-76,49,49,7,40,-64,32,55,38,43,-98,85,127,35,4,-20,43,-39,-97,-2,38,-31,-19,50,-48,-51,110,-3,-29,-59,-32,63,-65,63,-12,9,-12,47,53,-41,-27,51,-14,72,-127,-32,23,-127, -2,-3,-25,-74,8,16,36,22,-3,-1,8,62,2,-11,-11,8,-11,17,-17,17,6,25,25,-32,3,-31,8,11,-7,5,48,-77,41,18,10,-24,14,3,-34,-20,9,3,-16,7,23,-30,22,-1,7,-9,5,-7,3,5,-5,8,-5,47,6,-2,11,-17,3,-17,-28,-18,29,-48,-105,-8,39,-14,-127,-24,-10,17,10,-10,8,12,-14,22,-36,-3,-43,20,25,35,-24,-16,24,-10,21,5,-2,-46, 
  /* [0][1][][] */ -42,63,-18,38,-87,-14,-11,-44,26,94,-43,-22,-31,-24,-8,61,127,-25,-96,-14,61,-127,-28,18,-34,-48,-127,-4,38,35,-50,30,-127,-76,-58,2,64,-4,-53,47,-20,84,-1,-1,35,-56,-13,-32,127,42,-2,20,44,10,-37,-17,31,8,-124,127,-36,-85,22,127,-59,-36,-89,127,-39,127,-20,56,-35,-55,37,7,-35,-69,127,49,127,36,7,-1,127,29,-95,46,-39,-35,-101,38,96,103,29,-60, 127,127,127,127,-46,-127,127,24,127,-127,18,-127,-104,127,127,127,-16,-127,-61,-127,127,24,-65,127,127,127,-54,-127,127,127,-127,127,-9,-127,-126,127,-127,-45,86,108,-127,-127,127,127,127,-119,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-42,40,-105,-25,-66,-66,127,127,-73,123,127,-107,-127,127,-40,127,-127,-127,-127,125,-77,127,-42,127,78,127,-39,-127,-24,-108,-127,-127,-24,-127,-23,-127,-127,118, -26,67,-39,3,127,71,-23,49,5,26,-10,-5,-27,-31,-15,-8,-105,-20,-127,37,32,79,-13,-113,-34,-43,121,75,12,36,73,8,125,-51,127,-4,57,5,-90,15,37,22,-24,2,-23,-50,-13,-42,83,13,-12,38,-6,-4,-76,-15,24,20,127,-87,1,127,1,-36,-111,-29,-75,103,16,-15,117,30,-19,-58,13,46,-28,-8,-42,0,-44,9,48,26,-90,36,127,-48,32,-20,127,-9,-113,35,34,18, 
  /* [0][2][][] */ -5,-38,-22,-58,-5,15,40,30,-3,10,-21,52,27,-36,-8,5,43,1,10,21,-11,30,-14,-25,1,-24,9,5,-8,-7,50,-75,-40,69,-27,-26,30,-38,-61,15,8,9,-34,19,14,-74,-11,-1,-11,5,19,-7,8,1,-23,6,-1,45,-51,35,-6,-13,7,17,-6,-10,21,-55,-58,11,-21,-11,-115,-29,1,18,15,-9,58,16,21,21,-42,18,10,25,-19,11,3,26,22,-7,19,40,-7,-31, -29,-7,-28,23,-44,75,-25,65,5,-5,55,-12,127,-9,-17,-19,-1,-40,-67,24,-20,80,-43,-111,-46,-49,99,71,14,45,54,-2,-125,65,-13,-24,-29,-29,-127,-6,43,-15,-16,37,-26,-41,-17,-48,-57,30,69,24,-10,-82,28,51,18,26,76,-52,18,-56,-7,-1,19,-26,-127,-53,-11,-27,-61,20,32,-44,-27,-6,-44,26,-55,0,50,34,19,12,4,62,-90,127,14,126,-31,-19,116,-24,46,83, -10,-34,-27,31,12,65,-45,13,5,-3,-3,13,12,-53,-11,-14,-45,-6,18,20,-27,5,-20,3,-5,18,-3,51,-2,-6,34,29,19,40,20,-24,-7,-28,-34,9,12,-12,22,9,-74,-28,-12,5,-1,-16,-2,-4,-9,10,-18,-5,-1,-51,14,-27,-23,49,10,-29,-11,-3,36,-50,46,8,59,-21,29,-52,-17,23,11,12,-3,21,-29,33,87,-15,-18,54,40,-7,109,13,3,-18,10,-23,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0086156614124774933, 0.0043195360340178013, 0.0095921149477362633, 0.0017290536779910326, 0.0051618660800158978, 0.0058534285053610802, 0.015413704328238964, 0.0036570110823959112, 0.0096614006906747818, 0.018206270411610603, 0.0084628332406282425, 0.012780057266354561, 0.0041943877004086971, 0.018517481163144112, 0.0059736925177276134, 0.0081776166334748268, 0.0038515073247253895, 0.012374090030789375, 0.0023126914165914059, 0.012189192697405815, 0.0022888316307216883, 0.0076741357333958149, 0.005479597020894289, 0.015473206527531147, 0.011687763966619968, 0.011589423753321171, 0.0050494978204369545, 0.0075598321855068207, 0.0043783271685242653, 0.0040569473057985306, 0.0056015211157500744, 0.00579840037971735, 0.0054241870529949665, 0.0080132205039262772, 0.0081808324903249741, 0.0095118498429656029, 0.01974991150200367, 0.0053888759575784206, 0.002374798059463501, 0.0052665732800960541, 0.0079912189394235611, 0.014297747053205967, 0.016636908054351807, 0.0065671941265463829, 0.0091985790058970451, 0.001959989545866847, 0.01247701421380043, 0.0093964077532291412, 0.0033226849045604467, 0.0072676748968660831, 0.0078877666965126991, 0.0042914627119898796, 0.009821789339184761, 0.012440881691873074, 0.0096478741616010666, 0.016027318313717842, 0.012704170309007168, 0.010943970642983913, 0.0046332981437444687, 0.0035697184503078461, 0.012953266501426697, 0.0057849409058690071, 0.010677521117031574, 0.004888645838946104, 0.0081330956891179085, 0.0074749528430402279, 0.003100220113992691, 0.0035033326130360365, 0.012875307351350784, 0.009931677021086216, 0.0073164361529052258, 0.0052176211029291153, 0.0079320482909679413, 0.0069535081274807453, 0.011299381963908672, 0.011495782062411308, 0.020193679258227348, 0.0024137322325259447, 0.0094352401793003082, 0.010654382407665253, 0.0065254499204456806, 0.022282423451542854, 0.0092289065942168236, 0.004756879061460495, 0.0054363175295293331, 0.0035245493054389954, 0.0054102051071822643, 0.0083972318097949028, 0.0085577815771102905, 0.0044800722971558571, 0.0081969797611236572, 0.0047168801538646221, 0.0065460861660540104, 0.018786186352372169, 1.1786419153213501, 0.0031781173311173916, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 14404, 1099, 7393, -532, 4094, 4396, 26457, 3859, -1035, 22764, 6073, 1307, 9098, 49119, -382, -2990, 8873, 9058, 1886, -247, -437, 14887, 3048, 3671, 10103, 5960, 3873, 3970, 98, 37, 7089, 8934, 14089, 2995, 6571, -556, 23716, 7265, 865, 3312, 643, 11511, 13713, 3879, 4451, 9603, 16649, 5056, 3735, 3487, 137, -479, 15019, 7002, 7784, 10281, -113, 10357, 2259, 3360, 13499, 5251, 3630, 8059, 8069, 3626, 7802, -669, 15981, 7934, 7838, -873, -1651, 3398, 1873, 3680, 23842, 15616, 13195, -2218, 3672, -4863, -1765, 626, 4812, 6441, 7335, 4771, 9392, 3671, 6144, 3431, 14338, 16492, -6885, 12610, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018402774003334343, 0.00030903759761713445, 0.00018508582434151322, 0.00093648408073931932, 0.00039728646515868604, 0.00020778803445864469, 0.00011931824701605365, 0.00091687258100137115, 0.00046154411393217742, 7.9167053627315909e-05, 0.00024509275681339204, 0.00063432269962504506, 0.00030312241869978607, 9.8983211501035839e-05, 0.00022946015815250576, 0.00023669982329010963, 0.00025395362172275782, 0.00025422286125831306, 0.00023638951824977994, 0.00043012067908421159, 0.00055170356063172221, 0.00016646731819491833, 0.00048599750152789056, 0.00021358176309149712, 0.00018240125791635364, 0.00035246845800429583, 0.00036987572093494236, 0.00022129429271444678, 0.00046367707545869052, 0.00036213794373907149, 0.00019904682994820178, 0.00020919486996717751, 0.00013833062257617712, 0.00036818534135818481, 0.00026116002118214965, 0.00042321314685977995, 9.6309966465923935e-05, 0.00036449788603931665, 0.00052005762699991465, 0.00028089989791624248, 0.00073507276829332113, 0.00016825679631438106, 0.00015548313967883587, 0.00019163500110153109, 0.00025925834779627621, 0.00033942048321478069, 0.00016764806059654802, 0.0002871123724617064, 0.00042669608956202865, 0.00026118630194105208, 0.00061648094560950994, 0.0013698289403691888, 0.00017851668235380203, 0.00022715041995979846, 0.00030329669243656099, 0.00018134058336727321, 0.00061067461501806974, 0.0001739124272717163, 0.00035237215342931449, 0.00047862908104434609, 0.00012727346620522439, 0.00025273705250583589, 0.00029426070977933705, 0.00034539008629508317, 0.00012651474389713258, 0.00030573789263144135, 0.00024641855270601809, 0.0005206491332501173, 0.00016948678239714354, 0.00014743517385795712, 0.00024616820155642927, 0.00064561067847535014, 0.00021587472292594612, 0.00038384113577194512, 0.0002102495200233534, 0.00035027664853259921, 9.906504419632256e-05, 0.00028629184816963971, 0.00012574277934618294, 0.000539717439096421, 0.00029831728897988796, 0.00042303817463107407, 0.00022123476082924753, 0.00041144073475152254, 0.00034225304261781275, 0.00024017234682105482, 0.00022045528749004006, 0.00029082756373099983, 0.00018200656631961465, 0.00043329794425517321, 0.00022368943609762937, 0.0005025191348977387, 0.00014620299043599516, 0.0001670622150413692, 0.00042912864591926336, 0.00026065108249895275, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 1,-15,127,84,21,-9,50,2,77,-41,-33,-77,54,104,-64,-44, 
  /* [1][0][][] */ 5,71,-11,-15,15,-13,-33,17,94,72,-23,105,-2,-41,127,-73, 
  /* [2][0][][] */ 9,-29,-18,-19,-45,39,-32,96,-35,-65,21,78,-23,-127,98,-77, 
  /* [3][0][][] */ 99,127,-12,27,-119,-18,-66,-35,10,-1,108,-77,-62,89,-46,-34, 
  /* [4][0][][] */ -4,1,22,-1,-32,32,-17,58,-32,-37,-1,-11,-15,-127,29,2, 
  /* [5][0][][] */ 127,-49,-34,-1,10,-96,-8,30,-31,36,-93,16,13,-24,-25,25, 
  /* [6][0][][] */ -127,-75,-9,97,-69,24,-55,57,-101,-90,-60,-72,14,74,27,113, 
  /* [7][0][][] */ -14,14,-67,42,46,-127,-22,37,16,-42,19,-7,-8,13,-22,14, 
  /* [8][0][][] */ 26,-42,-19,-23,-1,11,-44,-52,-8,17,-55,-2,-127,-6,8,24, 
  /* [9][0][][] */ 18,-49,85,127,17,15,17,-56,124,-74,-4,-7,-15,73,-74,23, 
  /* [10][0][][] */ -84,-32,2,-46,127,29,36,57,108,-68,-59,5,59,-100,-69,47, 
  /* [11][0][][] */ 45,-18,-127,31,61,18,-25,30,2,-42,-19,-10,-8,26,-47,-2, 
  /* [12][0][][] */ 127,-75,25,26,-13,-45,-53,-28,57,-13,-121,-4,-103,-38,-19,61, 
  /* [13][0][][] */ 65,-105,70,-22,55,30,-94,-116,57,-127,-21,-36,-15,26,70,-49, 
  /* [14][0][][] */ -42,6,-75,-30,77,-127,45,-55,49,57,-2,-76,34,106,-7,36, 
  /* [15][0][][] */ 43,6,64,45,43,-65,-48,-12,37,-62,-112,-17,-127,-67,-15,62, 
  /* [16][0][][] */ -127,67,12,-24,-9,44,28,50,1,1,107,-21,0,10,28,3, 
  /* [17][0][][] */ -7,-9,-28,-26,-19,18,32,68,-29,127,-14,18,-20,72,48,1, 
  /* [18][0][][] */ -2,119,-40,5,0,15,27,-54,44,127,-36,119,-3,-75,55,-85, 
  /* [19][0][][] */ 9,-14,32,19,-2,47,-12,10,-9,0,-52,-5,-127,4,-22,39, 
  /* [20][0][][] */ 78,-51,-11,-83,-38,14,30,-81,-34,24,-127,-59,6,2,60,3, 
  /* [21][0][][] */ 70,8,127,62,-32,93,59,22,9,81,-3,-23,-37,89,-6,-43, 
  /* [22][0][][] */ 19,9,9,8,-20,2,31,127,2,6,10,23,18,30,10,4, 
  /* [23][0][][] */ -16,37,-81,12,34,-127,17,51,11,4,-26,4,-69,-17,3,21, 
  /* [24][0][][] */ 27,-71,2,-51,29,-16,-38,-17,53,8,47,90,-35,86,127,21, 
  /* [25][0][][] */ -127,-93,-62,5,-4,8,-9,-60,-67,-29,-103,-3,21,57,42,69, 
  /* [26][0][][] */ 7,0,31,-9,-6,7,-10,57,-56,-37,8,8,6,-127,49,-22, 
  /* [27][0][][] */ -93,37,-33,66,57,-18,-19,16,77,-40,127,44,-33,-6,14,-60, 
  /* [28][0][][] */ -22,-4,11,26,-22,-16,8,95,41,24,-24,-15,-127,-23,-1,44, 
  /* [29][0][][] */ -4,52,39,-27,39,-14,16,-27,-127,34,-35,8,2,30,-80,7, 
  /* [30][0][][] */ -17,-2,-127,-30,20,-51,6,29,-19,-15,-4,-10,-47,-46,8,2, 
  /* [31][0][][] */ 127,-24,-117,12,47,-4,-54,60,-17,-16,-117,-65,2,-10,-93,28, 
  /* [32][0][][] */ -122,50,54,52,14,95,13,28,45,9,127,17,-59,55,-18,-28, 
  /* [33][0][][] */ 8,-20,127,-14,-49,21,3,-51,11,13,-15,26,-6,20,46,20, 
  /* [34][0][][] */ -3,-29,-34,-127,83,31,28,-40,-48,-44,-29,-83,-4,1,19,58, 
  /* [35][0][][] */ 3,-43,40,52,23,-17,2,-22,-87,14,-17,21,-14,127,-18,-16, 
  /* [36][0][][] */ -127,54,-8,-18,-22,34,52,84,7,41,117,16,-29,49,5,-19, 
  /* [37][0][][] */ -51,25,127,-36,-70,-56,31,-43,24,11,-6,1,9,-70,93,5, 
  /* [38][0][][] */ 11,-25,7,45,27,-43,-76,3,-26,-27,62,-1,127,50,-25,12, 
  /* [39][0][][] */ -28,5,0,-39,-58,-45,34,127,-68,-21,31,-30,-20,32,16,47, 
  /* [40][0][][] */ 70,-14,-5,-2,-10,53,-22,-1,28,-9,-3,-2,127,24,-14,-28, 
  /* [41][0][][] */ -9,-6,-29,-127,65,-19,-15,-86,4,-67,12,-11,-15,-39,1,47, 
  /* [42][0][][] */ 12,54,-6,69,-111,-18,-78,-8,-58,-55,93,-127,-58,84,-15,48, 
  /* [43][0][][] */ 22,122,-47,127,28,5,66,-101,-28,102,4,18,24,-47,67,35, 
  /* [44][0][][] */ -6,-27,-127,23,52,60,-53,49,-25,-22,27,-16,7,-29,-66,3, 
  /* [45][0][][] */ -14,-8,8,-127,-43,-7,32,-8,-23,-4,-31,-1,3,-79,50,-13, 
  /* [46][0][][] */ 27,20,68,-11,22,2,-80,59,62,-32,-49,17,25,127,74,-21, 
  /* [47][0][][] */ 8,-14,12,-41,-30,31,-52,59,-5,-17,25,21,6,-127,43,14, 
  /* [48][0][][] */ 4,-13,0,-127,-16,-4,1,7,8,-24,20,-31,2,28,-10,66, 
  /* [49][0][][] */ 34,-43,9,127,90,10,-8,31,-48,6,39,61,-21,45,121,8, 
  /* [50][0][][] */ -14,-18,58,-23,25,127,-9,-60,33,-22,98,35,51,-35,-2,-64, 
  /* [51][0][][] */ 11,49,1,-2,22,1,-32,20,44,6,20,127,17,6,41,-45, 
  /* [52][0][][] */ -28,65,127,1,10,-17,3,-50,-37,-3,9,14,-18,58,-102,-20, 
  /* [53][0][][] */ -13,8,-76,-127,-65,25,8,-23,-28,48,6,-10,30,-17,47,6, 
  /* [54][0][][] */ 13,37,-34,-47,41,13,-41,27,93,-45,3,-58,-4,127,44,7, 
  /* [55][0][][] */ -2,-37,-45,-6,14,-54,-26,-127,16,-85,-18,17,-42,-68,-35,-25, 
  /* [56][0][][] */ 53,43,43,76,-1,-23,0,127,23,-40,2,-38,94,-2,-65,44, 
  /* [57][0][][] */ 71,-28,127,-30,-73,-90,20,-56,13,8,-106,21,55,-48,49,7, 
  /* [58][0][][] */ 83,115,13,88,-127,-12,25,24,-22,15,120,-34,-49,-47,-5,-78, 
  /* [59][0][][] */ 75,-26,0,-16,-47,-24,-21,14,-4,0,-127,-27,7,-6,28,18, 
  /* [60][0][][] */ -127,40,-19,-8,15,5,5,16,7,-10,53,-6,-20,-10,29,-13, 
  /* [61][0][][] */ -127,70,55,-1,14,10,-52,-45,115,-105,62,-8,-7,-25,-71,-37, 
  /* [62][0][][] */ -27,-37,-127,60,61,82,-1,97,34,-35,40,-2,-86,-12,-116,-31, 
  /* [63][0][][] */ -54,38,127,-70,-63,-77,58,-35,9,25,7,-11,8,-63,89,22, 
  /* [64][0][][] */ 8,101,-52,-19,44,-54,102,-118,7,127,14,-50,16,-105,14,20, 
  /* [65][0][][] */ 6,30,5,-23,68,4,1,-127,-10,-78,-29,-88,-13,-44,46,8, 
  /* [66][0][][] */ -127,-1,1,22,-58,26,4,-35,-108,-43,-113,72,57,54,32,71, 
  /* [67][0][][] */ 4,-56,6,127,23,-14,-37,3,72,-1,-1,-10,3,-15,-59,-10, 
  /* [68][0][][] */ 2,9,-4,127,-77,-27,-1,-21,-51,20,4,-41,-28,-70,-20,-60, 
  /* [69][0][][] */ 108,77,4,91,66,-44,97,-113,24,127,45,45,-3,-44,36,-14, 
  /* [70][0][][] */ 2,-34,17,-78,112,-24,27,7,33,-38,25,-13,11,127,38,97, 
  /* [71][0][][] */ -6,72,0,85,33,-127,-54,115,32,-85,28,15,28,-65,-54,26, 
  /* [72][0][][] */ -127,-92,-17,49,17,32,-26,-1,-59,-45,-82,36,64,22,4,121, 
  /* [73][0][][] */ -22,-39,5,72,-1,-4,-37,-8,63,-10,-12,32,-1,127,-46,-52, 
  /* [74][0][][] */ 70,-39,28,-29,-80,-9,21,7,-39,-2,-125,23,-127,-4,38,57, 
  /* [75][0][][] */ -8,-22,-3,127,-43,5,-21,-24,-68,0,-21,-31,4,-32,-22,-18, 
  /* [76][0][][] */ 3,-12,-5,47,30,15,-31,-127,20,-118,-2,23,-33,-25,27,-41, 
  /* [77][0][][] */ 127,-60,44,15,-54,-1,-19,15,74,13,-4,73,31,35,-72,66, 
  /* [78][0][][] */ 2,-14,35,11,8,-28,-66,34,38,-3,-48,-15,13,127,17,-26, 
  /* [79][0][][] */ -5,24,45,12,44,53,-40,-59,12,-43,70,-18,127,-23,-26,-36, 
  /* [80][0][][] */ -73,-87,-56,127,24,23,9,-39,-71,34,-86,19,45,-79,-28,41, 
  /* [81][0][][] */ 63,18,-79,40,127,94,-33,-38,-7,-105,-12,-80,-26,-15,-104,31, 
  /* [82][0][][] */ 122,112,-18,24,-127,-36,-56,-42,-69,14,122,-63,-27,85,-5,-36, 
  /* [83][0][][] */ 127,53,25,-30,7,-22,-24,27,38,16,85,-34,-70,-35,-27,-91, 
  /* [84][0][][] */ 16,-46,-57,-15,17,7,-5,-127,-15,-42,19,-2,-9,-11,-4,-25, 
  /* [85][0][][] */ -11,-8,-43,-40,8,-18,94,71,-17,127,-6,-45,43,49,73,-30, 
  /* [86][0][][] */ 74,-32,7,-2,-10,-25,-9,-19,-7,-3,-127,14,12,27,-15,21, 
  /* [87][0][][] */ -22,37,23,-24,-15,83,-40,42,10,-37,48,11,35,-127,17,9, 
  /* [88][0][][] */ 13,-38,-118,-41,97,-13,-36,-127,17,-46,-15,-40,-56,-27,54,-48, 
  /* [89][0][][] */ 38,-8,42,-120,28,26,-63,80,104,-127,25,-9,5,58,37,70, 
  /* [90][0][][] */ -26,-30,-12,122,106,66,114,-93,62,127,-50,113,4,36,-25,-41, 
  /* [91][0][][] */ 38,-21,-39,-10,-1,-127,-15,-15,-6,-8,-44,-18,24,-10,10,17, 
  /* [92][0][][] */ 12,-7,127,81,45,28,-2,39,-11,35,-60,54,40,79,6,9, 
  /* [93][0][][] */ 112,-28,-10,0,-2,-45,6,38,-8,33,-127,18,-15,21,6,34, 
  /* [94][0][][] */ 12,-6,44,78,88,-17,-20,59,-1,-25,-9,55,-7,127,-34,-63, 
  /* [95][0][][] */ -118,37,27,41,16,41,24,10,16,14,127,1,-18,26,-14,-30, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00057950423797592521, 0.00097316084429621696, 0.00058283616090193391, 0.0029489928856492043, 0.0012510570231825113, 0.00065432552946731448, 0.00037573373992927372, 0.0028872361872345209, 0.0014534046640619636, 0.00024929744540713727, 0.00077179825166240335, 0.0019974852912127972, 0.000954533985350281, 0.00031169861904345453, 0.00072257115971297026, 0.00074536888860166073, 0.00079970114165917039, 0.00080054899444803596, 0.00074439175659790635, 0.0013544521061703563, 0.0017373171867802739, 0.00052420637803152204, 0.0015304085100069642, 0.00067257002228870988, 0.00057438242947682738, 0.001109924865886569, 0.0011647404171526432, 0.00069685681955888867, 0.0014601213624700904, 0.0011403741082176566, 0.00062679941765964031, 0.00065875565633177757, 0.00043560381163842976, 0.0011594174429774284, 0.00082239415496587753, 0.001332700252532959, 0.0003032805398106575, 0.0011478055967018008, 0.0016376640414819121, 0.00088455510558560491, 0.0023147477768361568, 0.00052984146168455482, 0.00048961717402562499, 0.00060345954261720181, 0.00081640580901876092, 0.0010688367765396833, 0.00052792456699535251, 0.00090411829296499491, 0.00134366808924824, 0.00082247692625969648, 0.001941301510669291, 0.004313597921282053, 0.00056214991491287947, 0.00071529776323586702, 0.00095508270896971226, 0.0005710423574782908, 0.0019230173202231526, 0.0005476510850712657, 0.0011096216039732099, 0.0015072053065523505, 0.00040078477468341589, 0.00079587020445615053, 0.00092662835959345102, 0.0010876350570470095, 0.00039839552482590079, 0.00096277013653889298, 0.00077597319614142179, 0.0016395265702158213, 0.00053371471585705876, 0.0004642740823328495, 0.00077518483158200979, 0.0020330310799181461, 0.00067979056620970368, 0.0012087175855413079, 0.00066207675263285637, 0.0011030228342860937, 0.00031195630435831845, 0.00090153445489704609, 0.00039596459828317165, 0.0016995728947222233, 0.00093940261285752058, 0.0013321492588147521, 0.0006966693326830864, 0.001295628841035068, 0.0010777565184980631, 0.00075630389619618654, 0.00069421477383002639, 0.00091581739252433181, 0.00057313957950100303, 0.0013644573045894504, 0.00070439913542941213, 0.0015824350994080305, 0.00046039390144869685, 0.00052607973339036107, 0.0013513282174244523, 0.00082079152343794703, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -35157, 8833, 5588, -5967, 476, -3394, -11105, -41176, 9796, 28126, 38308, 1327, -815, -19892, 42124, -37213, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00075393426232039928, 0.00085032056085765362, 0.00080009113298729062, 0.0007982359966263175, 0.00086901901522651315, 0.001060124603100121, 0.00093317060964182019, 0.00058026920305565, 0.00069804844679310918, 0.00045817845966666937, 0.00059338676510378718, 0.00073997583240270615, 0.0012493972899392247, 0.0010762913152575493, 0.00048118532868102193, 0.00051891198381781578, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -13,-2,-27,3,32,-3,14,97,-52,16,30,-6,13,-15,-20,13,18,-25,-7,-8,72,-5,14,127,-13,93,2,-10,44,-6,5,-29,-19,60,28,-56,8,53,16,-6,-111,-28,19,39,36,26,-126,-49, 
  /* [1][0][][] */ -27,-19,16,11,-29,4,4,50,-61,-38,11,-54,-19,-14,4,9,-24,124,-10,23,3,13,-28,-16,16,-46,27,22,-25,-93,-40,22,-21,-11,32,-4,-6,-39,-3,18,-14,-34,127,17,10,-6,28,-12, 
  /* [2][0][][] */ -14,-15,-9,-38,-3,-58,6,-25,-4,8,7,24,16,12,-12,5,-7,-14,-22,-12,-4,-1,8,-127,-12,68,-16,7,2,-18,-4,-2,-6,53,6,4,16,13,19,0,-39,2,-16,-7,-5,-8,18,4, 
  /* [3][0][][] */ -7,31,0,-35,-2,1,1,-5,-21,-4,1,37,-127,9,-7,-4,-4,10,-23,-4,-33,8,6,11,-9,-10,9,25,-4,17,3,14,-2,1,13,20,-10,27,40,4,4,4,19,-27,14,-7,5,27, 
  /* [4][0][][] */ 40,-30,14,9,22,23,19,-23,-33,-1,-14,-23,0,8,7,19,20,-8,-78,0,-7,8,14,77,2,-27,9,42,10,-74,15,8,13,-33,38,-127,18,34,-3,19,-22,19,14,-27,-10,-19,11,10, 
  /* [5][0][][] */ 24,-1,-26,55,-4,-10,13,24,5,-2,40,8,0,48,-10,-3,-21,19,26,3,8,10,1,-28,-7,-47,-2,-18,-1,-9,6,-1,60,-127,0,29,-17,-13,13,3,-96,58,18,-5,-11,-2,-104,-11, 
  /* [6][0][][] */ 21,0,3,4,-14,-9,-2,-13,-1,11,-4,9,-18,8,1,4,-1,-19,127,5,8,14,13,-29,2,5,27,-13,-11,-3,-2,4,-1,-11,34,-45,2,-47,70,8,3,-5,-5,3,-6,-1,-1,-9, 
  /* [7][0][][] */ -40,-24,-3,37,-11,78,-4,44,7,21,2,127,77,-11,-5,2,-6,-17,-8,-12,-26,-4,-17,62,-1,-44,-50,-41,-4,-16,-7,-6,3,-3,-14,7,17,-61,88,-6,24,21,-49,-47,8,-8,12,-2, 
  /* [8][0][][] */ -42,-58,1,9,-11,9,-12,23,0,-76,1,47,57,-1,16,7,-15,70,-26,4,-42,19,-5,-15,4,-5,-6,45,-2,115,-9,29,-4,16,-27,-122,-127,70,26,24,27,-11,107,-19,5,32,27,37, 
  /* [9][0][][] */ -19,1,1,41,30,-32,0,-9,72,-50,7,65,-57,3,24,1,-4,21,-32,-18,67,10,-9,-14,4,6,57,-26,25,15,13,-1,-18,26,76,-112,-16,-127,-108,10,-26,19,57,13,2,9,-13,-49, 
  /* [10][0][][] */ -13,-7,-38,-127,49,78,15,-19,7,26,17,4,49,-56,-33,21,31,-43,57,-27,26,-14,39,54,-45,-108,3,-37,43,31,39,-47,-26,-78,27,-4,13,-37,-7,-31,-32,-66,-6,16,6,12,19,-47, 
  /* [11][0][][] */ 8,29,-5,57,32,-71,-86,-27,19,43,-18,21,-8,42,1,-72,13,42,3,-12,-44,-90,25,5,2,-36,15,-23,66,-24,41,-85,24,-10,-33,-93,68,34,-11,-127,-6,48,99,-53,-14,-59,28,34, 
  /* [12][0][][] */ 127,-3,-8,10,4,24,14,89,11,-15,-47,-28,-2,6,-5,0,-7,7,-1,-2,7,2,14,16,-5,11,4,10,-9,13,-12,1,9,-64,-5,10,-19,-12,-29,0,-20,-74,6,-119,-52,-7,80,-10, 
  /* [13][0][][] */ 11,6,-4,3,13,-11,-2,-3,-2,7,2,20,-6,7,4,1,2,0,11,3,13,-12,6,-4,3,0,12,127,9,-5,0,-5,0,3,-38,22,9,-4,2,-14,-14,-4,1,6,1,-5,-9,-9, 
  /* [14][0][][] */ 56,-28,52,-65,43,24,33,-92,-56,-50,-3,100,-59,-10,60,11,58,31,-43,77,23,19,66,-20,20,49,-39,-106,22,-34,58,53,-7,68,-127,-40,-42,53,80,16,-32,-2,48,7,-2,9,16,-31, 
  /* [15][0][][] */ -4,-47,-71,-45,68,22,84,-64,-23,23,-30,-43,93,20,-104,65,62,49,94,-99,-94,-33,71,-18,-88,49,13,78,46,53,43,-43,7,82,90,127,-29,-110,-23,-40,96,55,104,-64,-7,-25,-23,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.032042205333709717, 0.036138623952865601, 0.03400387242436409, 0.033925030380487442, 0.036933306604623795, 0.045055292546749115, 0.039659749716520309, 0.024661440402269363, 0.02966705895960331, 0.019472584128379822, 0.025218937546014786, 0.031448971480131149, 0.053099382668733597, 0.045742381364107132, 0.020450375974178314, 0.022053757682442665, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -380, 38301, -1147, 52872, 2876, 120399, -2202, 49916, 3872, 33676, 24824, 2231, 5028, 27512, -1076, -2974, 208, -856, 2369, -2192, 850, -2813, -787, -23003, -5868, 56591, 134682, 99508, 2355, 3466, -2881, -255, 26877, -1260, 36190, -1219, 66025, -1077, 50453, 2368, 2098, 49547, -3222, 5355, 36724, -702, 4503, 44530, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.060173761099577e-05, 3.2781124900793657e-05, 0.00019589283328969032, 4.5315191528061405e-05, 0.00014736304001417011, 7.8647179179824889e-05, 0.00012790750770363957, 0.00011748960241675377, 7.1272472268901765e-05, 3.2505089620826766e-05, 4.8376397899119183e-05, 9.7977281257044524e-05, 3.8768193917348981e-05, 2.2559863282367587e-05, 0.000163203090778552, 0.00014877913054078817, 0.00017827980627771467, 0.00013244699221104383, 0.00010829004895640537, 0.00014277987065725029, 7.4972485890612006e-05, 0.00017214991385117173, 0.00010117715282831341, 0.00015338903176598251, 8.372691081603989e-05, 7.5276468123774976e-05, 3.0958261049818248e-05, 7.3854076617863029e-05, 0.00014949568139854819, 0.00010366539936512709, 0.00010557328641880304, 0.00011901521793333814, 5.0178041419712827e-05, 0.00016430015966761857, 2.9590650228783488e-05, 5.3971507441019639e-05, 8.4432824223767966e-05, 9.9662793218158185e-05, 0.00011302772327326238, 7.8520009992644191e-05, 9.4428847660310566e-05, 0.00011950865155085921, 0.00011385200923541561, 7.45938959880732e-05, 2.4677772671566345e-05, 0.00015781122783664614, 8.8134795078076422e-05, 3.4371980291325599e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-92,94,72,53,-32,106,-66,62,-88,-80,47,52,-42,-72,-91,104,81,49,75,66,-75,-82,52,-31,-42,-64,-64,-65,61,-63,-113,-12,41,71,63,-65,54,-48,-21,49,-74,57,63,-101,10,76,-32, 82,-97,127,86,-77,-68,-58,-84,98,-100,-64,73,79,-110,-99,91,-37,96,84,127,87,-117,54,70,-53,-78,-70,-81,57,77,-31,-127,-87,82,81,85,-82,82,-82,-15,76,-92,81,90,-76,-127,92,-107, 31,-45,69,39,22,-40,-48,-41,43,-31,6,36,29,-80,-56,-4,-52,39,35,72,31,-57,32,27,-26,-48,-43,-24,32,31,87,-90,-86,44,35,35,-29,40,-38,-8,40,-40,33,41,-11,-8,37,-73, 
  /* [0][1][][] */ 92,-112,-38,96,54,-81,127,-91,90,-116,-73,82,84,-110,-13,-127,127,111,74,-39,85,109,-127,73,74,-76,-98,-101,-127,83,-68,-8,-88,71,106,95,-85,78,-81,88,83,-100,89,92,-90,107,94,-90, 127,-127,-64,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-24,96,-65,127,127,-48,127,127,69,127,127,-127,-127,-127,53,127,-30,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 63,-75,-33,68,40,-61,-51,-63,61,-43,-63,57,48,-55,-18,9,-60,50,56,-28,56,63,50,64,69,-66,-65,-46,37,55,127,15,-62,68,48,47,-50,57,-60,57,60,-59,56,62,-58,-67,58,-57, 
  /* [0][2][][] */ 45,-50,-45,53,27,-52,64,-45,41,-71,-5,40,56,-70,87,-82,74,53,35,-31,25,-8,-78,31,-23,-44,-50,-50,-76,29,-41,89,-74,37,49,40,-26,37,-43,-89,47,-49,41,46,-24,17,41,-71, 71,-73,-48,81,-57,-63,-73,-68,54,-75,-65,60,75,-46,127,30,-45,61,63,-42,54,-16,42,66,-50,-68,-82,-61,31,60,-24,116,-56,66,56,58,-49,61,-65,-108,68,-69,59,62,-89,51,63,-55, 40,-40,-29,48,33,-19,-19,-34,15,-27,-53,25,32,2,70,21,-37,23,29,-33,26,1,39,43,-24,-29,-51,-25,34,32,61,67,3,33,14,23,-21,30,-27,-57,28,-30,26,29,-62,10,33,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0038505736738443375, 0.0013931978028267622, 0.0083254454657435417, 0.0019258955726400018, 0.0062629291787743568, 0.0033425050787627697, 0.0054360688664019108, 0.0049933078698813915, 0.0030290798749774694, 0.0013814662816002965, 0.0020559967961162329, 0.0041640345007181168, 0.0016476482851430774, 0.00095879414584487677, 0.0069361310452222824, 0.0063231131061911583, 0.0075768916867673397, 0.0056289969943463802, 0.004602327011525631, 0.0060681444592773914, 0.0031863306649029255, 0.0073163709603250027, 0.0043000290170311928, 0.0065190335735678673, 0.0035583935678005219, 0.0031992497388273478, 0.0013157260837033391, 0.0031387980561703444, 0.0063535664230585098, 0.0044057792983949184, 0.0044868644326925278, 0.0050581465475261211, 0.0021325666457414627, 0.0069827567785978317, 0.0012576025910675526, 0.0022937890607863665, 0.0035883949603885412, 0.0042356685735285282, 0.0048036780208349228, 0.0033371003810316324, 0.0040132259018719196, 0.0050791176036000252, 0.0048387101851403713, 0.0031702406704425812, 0.0010488053085282445, 0.0067069767974317074, 0.003745728638023138, 0.0014608091441914439, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 857, 945, 3023, 251, 7899, 20354, 2820, -42, -769, -625, 1349, 811, 3308, 1422, 16661, 3319, 2226, -1665, -383, 4779, -1788, 11941, 13172, 13220, 4403, 590, 3673, 4490, 8161, -500, 7360, 5372, 740, -65, 5680, 3812, -1458, 367, -751, 6225, 1402, -974, -1048, -2, 1343, 2460, 981, 1076, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030692759901285172, 0.00071821402525529265, 0.00019232314662076533, 0.00039219905738718808, 0.00028318431577645242, 0.0001976712082978338, 0.00041128345765173435, 0.00028158907662145793, 0.00034761577262543142, 0.00069719803286716342, 0.00071752641815692186, 0.00033228110987693071, 0.00036871721385978162, 0.00052179401973262429, 0.00021566508803516626, 0.00037944043288007379, 0.0002204741322202608, 0.00026100978720933199, 0.00019519435591064394, 0.00019033212447538972, 0.00033993832767009735, 0.00021449057385325432, 0.00028251882758922875, 0.00011976974201388657, 0.00036532848025672138, 0.00022561207879334688, 0.001876445603556931, 0.00042311009019613266, 0.00022158813953865319, 0.00043150671990588307, 0.00035504097468219697, 0.00022563704987987876, 0.00050570105668157339, 0.00021725335682276636, 0.00065293541410937905, 0.00048550090286880732, 0.00095046666683629155, 0.0002836404019035399, 0.0002418594085611403, 0.00030278836493380368, 0.00015260931104421616, 0.00016726109606679529, 0.00027454306837171316, 0.00035999788087792695, 0.0014566822210326791, 0.00055075745331123471, 0.00023185875033959746, 0.0011081827105954289, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-7,75,-27,43,23,-26, 
  /* [1][0][][] */ 31,65,58,10,13,-24,98,127, 
  /* [2][0][][] */ -62,9,23,10,-127,-3,-2,-20, 
  /* [3][0][][] */ 86,-3,-5,-126,-127,16,25,-19, 
  /* [4][0][][] */ -127,51,6,-4,60,-16,22,11, 
  /* [5][0][][] */ -105,-13,22,-6,-127,2,5,79, 
  /* [6][0][][] */ -3,-127,14,-18,4,1,6,44, 
  /* [7][0][][] */ -81,2,12,115,127,-43,-37,10, 
  /* [8][0][][] */ 76,4,-8,-127,-7,-15,-55,-36, 
  /* [9][0][][] */ 6,-127,-24,-6,17,81,-46,97, 
  /* [10][0][][] */ -90,-18,1,13,-127,87,58,-15, 
  /* [11][0][][] */ 125,5,38,9,-39,-52,-21,-127, 
  /* [12][0][][] */ 3,9,34,-4,10,-67,127,67, 
  /* [13][0][][] */ 58,-35,9,-16,99,127,105,-43, 
  /* [14][0][][] */ 127,30,-28,5,-77,-21,-13,-6, 
  /* [15][0][][] */ -9,-127,23,-3,2,-2,18,42, 
  /* [16][0][][] */ -41,-25,-3,2,-127,4,15,21, 
  /* [17][0][][] */ -16,114,-123,13,25,-127,124,-118, 
  /* [18][0][][] */ 127,-31,-43,30,-77,38,10,123, 
  /* [19][0][][] */ 127,-31,-19,-14,53,-33,71,10, 
  /* [20][0][][] */ 118,4,-17,127,8,44,-5,-42, 
  /* [21][0][][] */ 5,28,-71,17,-31,101,-127,-74, 
  /* [22][0][][] */ -127,20,46,-5,-34,-9,-29,-21, 
  /* [23][0][][] */ -42,-72,10,19,-127,70,72,-19, 
  /* [24][0][][] */ 127,-7,-7,-26,-95,-14,-7,0, 
  /* [25][0][][] */ 20,-23,11,-29,127,55,51,-43, 
  /* [26][0][][] */ -7,-101,8,-40,4,-127,86,-45, 
  /* [27][0][][] */ -16,-127,26,-20,-4,-56,32,-10, 
  /* [28][0][][] */ -127,29,-33,-13,-27,-14,124,53, 
  /* [29][0][][] */ -2,41,14,10,2,33,-83,-127, 
  /* [30][0][][] */ 127,-18,-1,13,-99,-6,-50,-44, 
  /* [31][0][][] */ 10,-45,40,-20,30,-87,127,27, 
  /* [32][0][][] */ -71,21,13,9,-127,-98,-99,41, 
  /* [33][0][][] */ -26,19,2,24,-127,-60,-47,13, 
  /* [34][0][][] */ 23,-127,64,3,-5,89,-72,73, 
  /* [35][0][][] */ -24,-42,-127,-11,-5,-69,42,-53, 
  /* [36][0][][] */ -1,127,44,10,-12,8,-15,-26, 
  /* [37][0][][] */ -127,40,27,-19,59,-37,-12,-120, 
  /* [38][0][][] */ -127,-17,-62,2,42,33,43,119, 
  /* [39][0][][] */ 13,-39,80,-1,19,-88,127,80, 
  /* [40][0][][] */ -20,-14,-5,-38,-120,105,127,-26, 
  /* [41][0][][] */ -127,35,12,-58,-82,-67,-99,36, 
  /* [42][0][][] */ -52,-127,-102,2,-2,72,-124,-91, 
  /* [43][0][][] */ -68,-2,-14,-127,79,68,57,1, 
  /* [44][0][][] */ 127,-13,19,-97,39,-33,-2,50, 
  /* [45][0][][] */ -8,-127,-8,-23,-5,-59,51,0, 
  /* [46][0][][] */ 105,1,-3,-28,127,-44,-24,-3, 
  /* [47][0][][] */ 122,10,-13,127,-20,16,10,-50, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00065016571898013353, 0.0015213950537145138, 0.00040739873657003045, 0.00083079648902639747, 0.00059987022541463375, 0.00041872754809446633, 0.00087122304830700159, 0.00059649103786796331, 0.00073635554872453213, 0.0014768767869099975, 0.0015199384652078152, 0.00070387212326750159, 0.00078105484135448933, 0.0011053179623559117, 0.00045684401993639767, 0.00080376985715702176, 0.00046703102998435497, 0.00055289786541834474, 0.0004134808259550482, 0.00040318112587556243, 0.00072009244468063116, 0.00045435604988597333, 0.00059846049407497048, 0.00025370862567797303, 0.00077387643977999687, 0.00047791475662961602, 0.0039748805575072765, 0.00089627545094117522, 0.00046939085586927831, 0.00091406202409416437, 0.00075208442285656929, 0.00047796766739338636, 0.0010712281800806522, 0.00046020845184102654, 0.0013831151882186532, 0.0010284380987286568, 0.0020133764483034611, 0.00060083635617047548, 0.00051233154954388738, 0.00064139754977077246, 0.00032327277585864067, 0.00035430971183814108, 0.000581565429456532, 0.0007625846192240715, 0.0030856945086270571, 0.0011666712816804647, 0.00049114710418507457, 0.0023474670015275478, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -43238, 23649, -14461, -13253, 18420, 2153, 31298, 47393, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044281763257458806, 0.00074135191971436143, 0.0016556020127609372, 0.0016701798886060715, 0.00086705049034208059, 0.0006158635369502008, 0.00074648455483838916, 0.0011319242184981704, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-2,-28,16,6,-40,4,-9,-116,127,-37,116,114,1,68,-9,2,-20,10,7,-2,-7,-11,-42,20,-82,9,60,3,16,14,-28,-10,-79,100,23,-16,-7,3,-24,114,-4,39,-18,-24,20,-10,1, 
  /* [1][0][][] */ 4,27,127,8,-4,-26,5,-82,31,-7,20,1,-21,9,-4,-112,9,-56,10,6,-21,40,22,-26,-9,-5,16,5,14,-4,17,2,-5,17,11,20,-22,-25,65,-54,2,34,-12,38,-12,3,19,-14, 
  /* [2][0][][] */ 11,-45,22,-40,36,26,-10,-32,5,-1,-3,13,-9,55,10,-1,-39,127,-24,-32,-18,20,-33,-9,120,2,-5,0,-23,-5,6,-35,-5,-17,2,7,-9,2,-10,7,18,-22,-18,2,0,28,-24,-36, 
  /* [3][0][][] */ -4,-86,-8,6,8,-9,-6,-2,-10,-8,26,14,16,-1,44,-2,-9,-22,2,20,-8,29,-24,6,13,60,8,7,-6,1,127,8,6,13,-6,6,-32,-16,-10,10,-10,13,-10,38,-8,5,-4,26, 
  /* [4][0][][] */ -115,10,2,10,8,-47,-2,1,40,-32,20,-20,-38,-6,-17,-11,5,11,-6,24,10,-25,12,-1,-10,52,4,112,7,-4,-11,-19,4,-127,-35,17,4,7,1,-9,-42,-16,-19,22,-61,-6,5,12, 
  /* [5][0][][] */ -9,26,25,15,-41,26,0,46,33,-9,18,-7,4,-34,8,37,3,-86,28,5,52,-37,6,32,20,10,-89,-48,-43,-25,24,8,-13,-61,-3,-70,65,3,-37,19,17,-50,5,10,127,6,-44,-8, 
  /* [6][0][][] */ -36,-17,-13,-3,36,-30,1,-25,-12,5,36,-14,-9,28,-4,-61,-2,8,-4,-22,-45,41,-3,-83,-13,-11,-59,-76,22,52,-24,0,1,-67,-11,62,-65,-46,18,-57,-2,-13,12,37,127,-36,36,33, 
  /* [7][0][][] */ 7,39,-83,40,-26,24,6,86,-11,-8,83,-45,31,-23,-12,-7,-16,-127,37,-48,67,57,19,-61,30,-26,20,-2,-25,36,-4,8,-9,44,-19,-34,7,-70,-41,-69,-15,-40,49,81,-36,-14,-12,2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018819749355316162, 0.031507454812526703, 0.070363081991672516, 0.070982642471790314, 0.036849644035100937, 0.02617420069873333, 0.031725592911243439, 0.048106778413057327, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52227, -13, 7540, 1219, 5499, -5357, 1973, 22533, 1966, 26166, -3097, 15586, -6485, -1244, 30176, 725, 986, 16015, 31256, 12737, 317, -606, 1621, 9979, -8070, 28765, 46452, 33140, 3423, 174, -2004, 1178, 426, 16955, -7122, 16865, -10407, 18756, -22434, 116989, 16779, 18457, 10473, -1414, 15021, 3287, 3144, -766, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00037592725129798055, 0.00032599270343780518, 0.00019358776626177132, 0.00030942799639888108, 0.00013788392243441194, 0.00010629246389726177, 0.00061249051941558719, 0.00015700775838922709, 0.00011025703861378133, 0.00018218053446616977, 8.6408348579425365e-05, 0.00026973584317602217, 0.0002376584307057783, 0.00020537702948786318, 8.2306352851446718e-05, 0.0020210074726492167, 0.00024516801931895316, 0.00027186359511688352, 7.2086368163581938e-05, 0.00016824448539409786, 0.00029234704561531544, 0.00018507808272261173, 0.00020499869424384087, 0.00020475633209571242, 0.00017313944408670068, 0.00012714543845504522, 0.00050434184959158301, 0.00010511635628063232, 0.00019671668997034431, 0.0043882415629923344, 0.00010655060032149777, 0.00020057073561474681, 0.0016493824077770114, 0.00017018915968947113, 0.00020035290799569339, 0.00014727858069818467, 0.00037870608502998948, 0.00013536517508327961, 0.00028891136753372848, 2.0459272491279989e-05, 0.00019471437553875148, 5.3160758398007601e-05, 0.00015797359810676426, 0.00016630742175038904, 0.00015998231538105756, 0.00011512955097714439, 0.00010148323053726926, 0.00011529194307513535, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-3,21,109,4,83,-1,28,17,9,8,8,-9,-10,-44,9,-2,8,-22,-118,-7,-23,127,-10,-3,6,-6,8,-6,4,18,97,20,28,38,-28,1,35,-4,3,18,-68,-8,-9,17,3,-7,-10, 127,9,15,-127,28,89,11,10,126,127,9,44,-50,-24,6,8,127,-57,-57,-55,-103,25,-110,14,16,70,-31,-85,23,20,10,-124,5,-63,127,10,-40,-47,-7,116,-79,-97,-30,2,-34,-8,-127,24, -32,-2,8,14,0,66,5,18,31,9,-15,33,-15,-4,15,4,-104,28,-2,77,-33,-11,-19,-7,-4,-60,-3,28,-17,5,5,-23,9,-25,16,-19,-1,48,41,-13,50,37,-15,11,-44,4,-3,-7, 
  /* [0][1][][] */ 126,6,1,-99,13,-28,33,-16,9,9,-13,53,-7,-1,20,-31,0,-50,-60,-89,11,-74,-125,-18,4,98,-15,-127,-9,33,13,-107,17,-52,-1,127,-3,60,-43,41,-62,-127,39,-90,-43,-15,-13,-5, 29,-127,-127,113,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-84,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,95,127,-127,127,-28,-41,127,-127,127,127,127,-80,127,127,127,-122,100,108, 55,5,50,-15,5,-62,44,18,-23,14,-101,-8,-1,-42,127,5,62,-67,-72,84,14,-45,9,-33,1,5,-38,69,19,40,1,3,34,-45,9,67,-6,66,67,-11,-82,7,-83,-32,26,-17,-11,6, 
  /* [0][2][][] */ -53,-7,26,-18,6,34,-38,22,9,-23,9,33,6,-6,-35,18,4,22,-15,103,7,-32,-17,-12,-3,22,-1,51,-10,3,47,-31,-18,-43,-31,-39,-1,31,7,-21,9,-4,42,-39,-35,17,-11,18, 69,125,75,20,16,-22,121,35,18,-3,46,27,-5,-1,-88,25,-59,-57,-35,121,-38,50,11,20,32,-63,-40,30,76,1,127,23,85,-25,6,-35,-25,-17,-11,120,-28,-11,-39,45,22,-32,8,-127, -41,-4,7,-6,5,-7,-61,8,-17,-10,-39,-39,18,-10,-7,12,32,23,-9,-127,23,-10,3,-8,-6,10,-11,-54,-15,8,5,8,-19,88,-37,-22,-4,37,25,-61,3,8,-37,5,-42,127,-6,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015976907685399055, 0.01385468989610672, 0.0082274796441197395, 0.013150689192116261, 0.005860066507011652, 0.0045174295082688332, 0.026030845940113068, 0.0066728298552334309, 0.0046859239228069782, 0.0077426726929843426, 0.0036723546218127012, 0.011463773436844349, 0.01010048296302557, 0.0087285237386822701, 0.0034980198834091425, 0.085892811417579651, 0.010419640690088272, 0.011554202996194363, 0.0030636705923825502, 0.0071503901854157448, 0.012424749322235584, 0.0078658182173967361, 0.0087124444544315338, 0.0087021440267562866, 0.0073584262281656265, 0.0054036811925470829, 0.02143452875316143, 0.0044674449600279331, 0.0083604594692587852, 0.18650026619434357, 0.0045284004881978035, 0.0085242558270692825, 0.070098750293254852, 0.0072330390103161335, 0.0085149984806776047, 0.0062593393959105015, 0.016095008701086044, 0.0057530198246240616, 0.012278732843697071, 0.00086951907724142075, 0.0082753608003258705, 0.0022593322210013866, 0.0067138778977096081, 0.0070680649951100349, 0.0067992485128343105, 0.0048930058255791664, 0.0043130372650921345, 0.0048999073915183544, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 54581, 8661, 6686, 8360, 1352, 13206, -1572, -280, 661, 1519, 3317, 312, 1084, -750, 705, -2281, 3991, 9921, -314, 45320, 2961, 3830, 4847, -636, 3213, 4844, 31183, 15370, -109, -2573, 76, 3007, -2628, 12218, 2631, 8440, 7119, 5955, 34475, 1572, -788, 3157, 1118, 3891, 5174, 1876, -1092, 2773, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.8220029536169022e-05, 0.00026711300597526133, 0.00023132185742724687, 0.00038230125210247934, 0.0017001654487103224, 0.00038423121441155672, 0.0012309314915910363, 0.0010310057550668716, 0.000876372039783746, 0.00088485091691836715, 0.00067488302011042833, 0.00049512006808072329, 0.000873045704793185, 0.00058238481869921088, 0.00059316679835319519, 0.0016062373761087656, 0.00040690257446840405, 0.00042864264105446637, 0.001786933746188879, 6.0667069192277268e-05, 0.00042395619675517082, 0.00027034495724365115, 0.00082700117491185665, 0.00086733035277575254, 0.0003751075710169971, 0.0002408359432592988, 0.00013016136654186994, 0.00023656107077840716, 0.00096823903732001781, 0.0010133505566045642, 0.00051318877376616001, 0.00027817147201858461, 0.00074726215098053217, 0.00018034173990599811, 0.000403113808715716, 0.00021390407346189022, 0.00050990830641239882, 0.00022021074255462736, 6.9565518060699105e-05, 0.0029073203913867474, 0.00073832651833072305, 0.00087010470451787114, 0.00046860554721206427, 0.00040543358772993088, 0.00023138282995205373, 0.00059757707640528679, 0.0010327200870960951, 0.00096168089658021927, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,34,5,-8,127,39,-67,-39, 
  /* [1][0][][] */ -7,-4,13,127,4,-12,9,23, 
  /* [2][0][][] */ 46,-127,-17,48,6,-70,78,5, 
  /* [3][0][][] */ 127,-19,-10,14,-13,-42,35,14, 
  /* [4][0][][] */ 7,-41,127,-14,-1,-51,6,-109, 
  /* [5][0][][] */ 81,-9,2,-26,127,11,-27,-4, 
  /* [6][0][][] */ -7,74,5,127,34,40,-47,-36, 
  /* [7][0][][] */ -12,127,-7,0,1,-21,19,2, 
  /* [8][0][][] */ 127,49,-7,6,-38,-30,12,-28, 
  /* [9][0][][] */ -127,9,7,32,55,11,-10,1, 
  /* [10][0][][] */ -78,-29,19,127,22,22,-30,11, 
  /* [11][0][][] */ -127,8,18,-52,31,10,-16,-51, 
  /* [12][0][][] */ 127,24,4,17,-53,0,0,-51, 
  /* [13][0][][] */ -6,70,-127,-3,5,115,-81,79, 
  /* [14][0][][] */ -37,-26,-6,127,24,8,8,-13, 
  /* [15][0][][] */ -5,127,3,-6,-3,-9,7,-57, 
  /* [16][0][][] */ 0,-127,-16,15,-4,-92,104,-24, 
  /* [17][0][][] */ 18,127,0,-9,2,69,-77,-16, 
  /* [18][0][][] */ 12,32,-127,-20,39,38,-22,83, 
  /* [19][0][][] */ -66,20,-8,-25,-127,7,8,17, 
  /* [20][0][][] */ -127,-8,-33,-8,49,-28,32,-13, 
  /* [21][0][][] */ -60,-25,-9,17,-127,4,25,5, 
  /* [22][0][][] */ -127,-28,-1,-4,106,-22,47,60, 
  /* [23][0][][] */ -32,-18,-12,-7,-1,82,-127,-105, 
  /* [24][0][][] */ -5,33,-127,0,11,42,-16,78, 
  /* [25][0][][] */ 123,-38,2,127,-70,-25,41,-36, 
  /* [26][0][][] */ 13,-27,1,5,-7,122,127,-27, 
  /* [27][0][][] */ 86,-6,-11,3,127,42,26,-33, 
  /* [28][0][][] */ 6,127,-71,-4,7,77,-39,125, 
  /* [29][0][][] */ -13,4,5,7,-9,90,-127,-75, 
  /* [30][0][][] */ 0,-2,-7,-127,-2,-4,-1,-11, 
  /* [31][0][][] */ -71,-12,-7,2,-127,4,2,4, 
  /* [32][0][][] */ -10,49,19,-127,2,42,-105,-123, 
  /* [33][0][][] */ -74,-11,0,5,-127,49,58,2, 
  /* [34][0][][] */ -127,55,-8,2,32,-25,12,12, 
  /* [35][0][][] */ 12,126,-17,-11,28,-109,127,-16, 
  /* [36][0][][] */ -3,61,1,-30,2,93,-127,-40, 
  /* [37][0][][] */ 78,-123,-12,36,51,-127,127,-42, 
  /* [38][0][][] */ -4,-122,4,-11,22,113,-127,34, 
  /* [39][0][][] */ -1,-127,-10,-6,-5,-16,-54,-96, 
  /* [40][0][][] */ 100,64,5,0,-69,87,-120,-127, 
  /* [41][0][][] */ 28,-127,2,6,14,68,-39,126, 
  /* [42][0][][] */ 41,-8,14,-127,-43,6,-3,-32, 
  /* [43][0][][] */ -114,-26,-6,-127,53,18,-8,-12, 
  /* [44][0][][] */ 7,-18,-1,24,-24,92,127,-11, 
  /* [45][0][][] */ -127,-32,-2,8,14,9,20,-16, 
  /* [46][0][][] */ 21,61,127,23,3,15,16,30, 
  /* [47][0][][] */ -8,1,14,127,3,5,2,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019586164853535593, 0.00066884647822007537, 0.00057922606356441975, 0.0009572759154252708, 0.0042571858502924442, 0.00096210854826495051, 0.0030822318512946367, 0.0025816210545599461, 0.002194420900195837, 0.0022156517952680588, 0.0016898957546800375, 0.0012397724203765392, 0.0021860918495804071, 0.0014582817675545812, 0.0014852796448394656, 0.0040219915099442005, 0.0010188772575929761, 0.0010733139934018254, 0.00447445223107934, 0.00015190932026598603, 0.0010615792125463486, 0.00067693926393985748, 0.0020707971416413784, 0.0021717806812375784, 0.000939263089094311, 0.00060304917860776186, 0.00032592186471447349, 0.00059234496438875794, 0.0024244543164968491, 0.0025374128017574549, 0.0012850160710513592, 0.0006965366774238646, 0.0018711318261921406, 0.00045157270506024361, 0.0010093902237713337, 0.00053561222739517689, 0.0012768018059432507, 0.00055140402400866151, 0.00017419089272152632, 0.0072798812761902809, 0.0018487571505829692, 0.0021787276491522789, 0.0011733804130926728, 0.0010151988826692104, 0.00057937874225899577, 0.0014963229186832905, 0.0025859137531369925, 0.0024080327711999416, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -2989, -23229, 28697, 25220, 4177, 4402, 38656, 11354, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010424965294077992, 0.00052772602066397667, 0.0016162692336365581, 0.0012407392496243119, 0.0015481609152629972, 0.0010377925354987383, 0.00066723086638376117, 0.00054732977878302336, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -17,-3,10,-92,12,24,13,6,5,2,5,-6,105,0,3,6,0,-14,-6,-1,79,-4,-4,5,31,39,13,17,3,5,6,-127,12,4,2,-3,-29,-5,-22,35,12,-23,-5,4,3,-3,3,2, 
  /* [1][0][][] */ -44,-6,-2,-3,45,26,-39,71,16,11,-27,-15,16,0,19,40,0,43,23,-51,-1,22,127,26,-31,-4,59,0,22,-4,12,-5,11,-2,-4,-27,5,-54,8,6,-13,-4,-86,0,-34,8,-51,-94, 
  /* [2][0][][] */ -61,22,-4,14,49,-10,39,23,-12,53,13,-5,1,0,3,59,0,12,-127,29,0,13,0,-16,-36,-5,31,3,11,39,20,1,9,-13,-7,-9,9,6,1,-7,42,-6,-26,2,23,-60,26,22, 
  /* [3][0][][] */ -2,-5,-2,3,-11,38,4,-6,63,13,1,3,28,0,-23,-5,0,-2,-9,0,0,0,3,-16,-6,-3,-9,1,-12,-1,0,-7,-47,38,-57,-1,2,2,-1,-127,2,3,5,-47,3,-7,3,8, 
  /* [4][0][][] */ -2,-5,79,30,8,-21,-5,-4,3,-6,-2,-5,-76,0,-11,5,0,8,6,-2,64,4,1,-6,-14,31,-8,42,-9,2,-4,94,1,2,3,-1,9,-11,-9,-17,-6,-127,5,-2,0,-2,2,1, 
  /* [5][0][][] */ -9,46,3,-10,1,48,27,13,-20,29,6,52,24,0,-127,-2,0,8,-33,21,-10,10,-19,37,-20,-1,25,3,-12,23,26,-19,49,30,-37,-4,-3,19,-47,14,28,-14,-9,25,25,55,23,28, 
  /* [6][0][][] */ -21,-66,4,1,40,-42,-14,1,35,-31,-11,92,-4,0,-127,36,0,-17,41,-16,-2,2,21,-38,35,1,-7,-8,43,-5,-11,-8,96,-38,24,1,-3,-7,-72,-21,-8,-20,2,-32,-16,-79,-13,-24, 
  /* [7][0][][] */ -113,-31,-13,3,127,26,70,22,15,-1,29,-27,-29,0,93,103,0,1,0,64,-12,-1,-30,39,20,7,45,11,56,69,60,-10,-17,-18,-21,-24,6,18,22,42,75,1,-24,-16,65,2,70,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.044306099414825439, 0.022428354248404503, 0.068691439926624298, 0.052731417119503021, 0.065796837210655212, 0.044106181710958481, 0.028357312083244324, 0.02326151542365551, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 80019, 52045, 61082, 44046, 154, 13983, 3413, 26421, 31376, 21489, 30059, 5791, -45911, -127, 35166, -226, -204, 21218, 3538, 1365, -16508, -5717, 49839, 31796, -19741, 31266, 33409, 21236, -2485, 15138, -6188, -51760, 7363, 101441, 33092, 1245, 44572, -202, 122236, -26473, 13349, -28509, 3453, 87687, -1061, 92153, 1111, -22829, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.5448762800078839e-05, 7.5147152529098094e-05, 0.00021868145267944783, 9.4720009656157345e-05, 0.00011969965999014676, 0.00017447317077312618, 0.00011996507964795455, 5.4536354582523927e-05, 7.5139520049560815e-05, 3.4333108487771824e-05, 0.00010177505464525893, 3.0246210371842608e-05, 0.00017239156295545399, 0.005541567225009203, 7.2542738053016365e-05, 0.00019359400903340429, 0.0027484172023832798, 2.3150865672505461e-05, 7.833717972971499e-05, 0.00014878599904477596, 0.00011367718980181962, 0.00015572103438898921, 0.00011506195733090863, 3.8486003177240491e-05, 8.4854880697093904e-05, 8.7558822997380048e-05, 3.9605343772564083e-05, 5.7234847190557048e-05, 0.00027135829441249371, 5.4034586355555803e-05, 4.954604446538724e-05, 0.00019928986148443073, 0.0003200181236024946, 1.1198394531675149e-05, 7.7176948252599686e-05, 0.00019106133549939841, 1.8500959413358942e-05, 0.00044040806824341416, 3.7419813452288508e-05, 9.2532834969460964e-05, 6.2516577600035816e-05, 0.00023448406136594713, 9.9957527709193528e-05, 1.0053972800960764e-05, 0.00016611626779194921, 6.3149120251182467e-05, 0.00015742992400191724, 0.00016060147027019411, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-22,-6,-18,8,-39,-80,-68,-26,-49,8,68,35,-71,116,-42,-113,-84,38,-7,0,-71,-110,-79,-36,-124,-63,-20,70,15,97,27,-127,-88,-7,54,17,48,-127,79,-76,-15,103,-110,-4,-34,-87,109, 75,14,-28,-31,58,-127,-127,-81,58,-73,-115,111,38,-82,0,61,-52,-112,58,8,11,-112,-127,-69,-3,-127,-120,-40,-53,22,-57,54,28,-127,65,83,11,71,-92,127,-127,6,123,-127,1,-23,-127,94, -31,45,6,-6,-65,-109,-59,-18,86,-5,-127,40,7,-71,-100,-10,-127,-24,26,13,-15,-76,-36,-23,-10,-30,-57,-13,-8,19,-24,9,106,-83,72,30,14,36,-4,16,-79,4,5,-81,-18,6,-55,16, 
  /* [0][1][][] */ -84,-127,-45,-44,-7,55,97,-104,-24,-107,-19,114,89,-64,28,-95,-121,-95,91,-77,42,-88,-104,-127,41,-120,-78,-39,127,-60,127,85,-43,-85,-14,84,-34,-77,-106,91,41,60,104,-113,-90,-117,81,120, 127,-81,-127,-127,127,41,92,-127,100,-127,-111,127,127,-14,-5,127,-60,-127,127,-127,127,-127,-118,-119,127,-98,-127,-127,-116,-127,-69,127,27,-111,127,127,-68,-127,-96,90,61,127,127,-119,-112,-127,125,127, -53,31,-63,-85,-122,-24,31,-35,127,-19,-76,35,55,-70,-26,-42,-37,-29,53,-72,57,-81,-38,-24,48,-6,-46,-60,16,-90,-35,19,29,-97,122,24,-36,-60,2,-13,37,54,9,-79,-58,-37,66,35, 
  /* [0][2][][] */ -59,-109,-34,-35,1,35,-5,-35,-37,-56,-16,60,76,-127,-127,-64,-43,-20,64,76,52,-33,-12,-61,32,-59,-9,-60,73,28,78,64,106,-26,-37,-11,-94,35,-18,31,9,38,16,-58,96,-78,3,32, 87,-73,-89,-87,80,18,7,-47,49,-71,-33,55,83,-26,16,93,-24,-31,77,116,81,-53,-17,-56,95,-72,-17,-98,-50,39,-46,111,-18,-48,67,5,-127,49,-13,0,10,33,13,-71,127,-100,-12,40, -28,29,-42,-37,-81,-20,22,-11,60,-4,-13,33,30,-43,111,-28,-93,-5,29,58,74,-28,-1,-2,43,-1,-3,-62,-15,29,-21,39,-89,-43,67,2,-23,23,29,-38,7,36,-8,-15,63,-35,-5,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.003206572262570262, 0.0031937537714838982, 0.009293961338698864, 0.0040256003849208355, 0.005087235476821661, 0.0074151093140244484, 0.0050985156558454037, 0.0023177950643002987, 0.003193429671227932, 0.0014591570943593979, 0.0043254396878182888, 0.0012854639207944274, 0.0073266411200165749, 0.23551659286022186, 0.0030830663163214922, 0.0082277450710535049, 0.1168077290058136, 0.00098391179926693439, 0.0033293301239609718, 0.0063234050758183002, 0.0048312805593013763, 0.0066181435249745846, 0.004890133161097765, 0.0016356551786884665, 0.0036063322331756353, 0.0037212499883025885, 0.0016832271357998252, 0.0024324809201061726, 0.01153272669762373, 0.0022964698728173971, 0.002105706837028265, 0.0084698190912604332, 0.013600769452750683, 0.00047593176714144647, 0.0032800200860947371, 0.0081201065331697464, 0.00078629073686897755, 0.018717342987656593, 0.0015903420280665159, 0.0039326455444097519, 0.0026569545734673738, 0.0099655725061893463, 0.0042481948621571064, 0.0004272938531357795, 0.0070599410682916641, 0.0026838374324142933, 0.0066907717846333981, 0.0068255625665187836, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 5033, 75, 11338, 7044, 8961, 7483, 11713, -46, -94, -405, 2750, 515, 13795, -95077808, 3921, 24323, -76751744, -133, -593, 14076, 5221, -22, 90, 445, 4148, -941, 90, 802, 6132, 1991, 2956, 15276, 5259, 416, 219, -3214, 419, 5338, -185, 16495, 2646, 15170, -475, -121, 16122, 127, 12662, 4490, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00040948475361801684, 0.00032369338441640139, 0.00027891428908333182, 0.00026295401039533317, 0.00022814478143118322, 0.0002761136565823108, 0.00032783614005893469, 0.0011094240471720695, 0.00034813178353942931, 0.0018626321107149124, 0.00054170173825696111, 0.0016615183558315039, 0.00015895368414930999, 1.7057992796054577e-09, 0.00067205901723355055, 0.00013550177391152829, 1.7057992796054577e-09, 0.005471852608025074, 0.00035522386315278709, 0.00027588833472691476, 0.00021634019503835589, 0.0039582201279699802, 0.0002881064428947866, 0.0013790844241157174, 0.00091502658324316144, 0.00056224473519250751, 0.001889942679554224, 0.0015227060066536069, 0.00018963697948493063, 0.0014745808439329267, 0.00099591678008437157, 0.00015461941075045615, 0.00015372819325421005, 0.0077938539907336235, 0.00041868715197779238, 0.00038044893881306052, 0.0036622521001845598, 0.00024477194529026747, 0.0021295670885592699, 0.00020882062381133437, 0.0010910817654803395, 0.00014639475557487458, 0.00035933635081164539, 0.0069808466359972954, 0.00031063289497978985, 0.00042898539686575532, 0.00022356471163220704, 0.00019367191998753697, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 18,-127,49,-47,31,-23,-49,25, 
  /* [1][0][][] */ 87,84,-24,-111,12,-3,-90,127, 
  /* [2][0][][] */ 29,5,-47,123,54,127,50,87, 
  /* [3][0][][] */ 93,80,-92,127,-109,-11,-19,34, 
  /* [4][0][][] */ -41,-92,66,5,22,46,-40,-127, 
  /* [5][0][][] */ 35,-1,-40,35,13,-30,39,127, 
  /* [6][0][][] */ 59,-34,-94,-64,127,35,39,-16, 
  /* [7][0][][] */ 127,21,24,-23,26,-13,84,-59, 
  /* [8][0][][] */ 19,-99,14,112,-11,28,2,-127, 
  /* [9][0][][] */ 114,-127,11,-13,-3,24,-114,104, 
  /* [10][0][][] */ -127,-41,-107,17,-9,9,-120,64, 
  /* [11][0][][] */ -17,-36,-8,-105,-127,-41,46,-12, 
  /* [12][0][][] */ 13,6,-42,75,-79,-24,62,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -10,-32,0,18,40,127,45,42, 
  /* [15][0][][] */ 43,0,19,-127,66,44,-55,67, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,28,127,22,-22,-9,30,26, 
  /* [18][0][][] */ 98,-127,22,25,-8,19,-116,6, 
  /* [19][0][][] */ -127,-11,29,59,-51,-49,-90,66, 
  /* [20][0][][] */ 30,35,-51,115,-25,-127,-1,71, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -77,-11,-127,6,3,8,-104,2, 
  /* [23][0][][] */ -87,103,-29,-30,14,2,127,-78, 
  /* [24][0][][] */ 5,-56,-62,86,-12,-64,110,127, 
  /* [25][0][][] */ 16,38,34,29,127,127,-73,-55, 
  /* [26][0][][] */ -90,-33,-127,0,8,14,-98,-5, 
  /* [27][0][][] */ 3,-27,-25,8,-43,127,69,49, 
  /* [28][0][][] */ 11,-28,-15,46,31,127,42,59, 
  /* [29][0][][] */ 79,43,127,-6,-15,-19,77,5, 
  /* [30][0][][] */ -87,127,-20,-27,9,-2,104,-55, 
  /* [31][0][][] */ -46,-87,-14,11,20,-73,127,100, 
  /* [32][0][][] */ 9,-4,-58,124,-14,103,94,127, 
  /* [33][0][][] */ 7,60,-18,-122,21,-4,-1,127, 
  /* [34][0][][] */ -13,82,-10,-103,26,-16,13,127, 
  /* [35][0][][] */ 124,-15,-33,-33,42,56,127,-52, 
  /* [36][0][][] */ -127,1,17,53,-44,12,-93,74, 
  /* [37][0][][] */ 0,-27,-15,25,30,127,51,60, 
  /* [38][0][][] */ 13,33,11,94,127,-19,-26,43, 
  /* [39][0][][] */ -1,23,35,-127,39,10,-45,122, 
  /* [40][0][][] */ 101,22,127,13,0,-8,79,7, 
  /* [41][0][][] */ 1,-32,-29,85,59,127,75,99, 
  /* [42][0][][] */ -79,11,127,24,-39,1,-32,60, 
  /* [43][0][][] */ -5,-69,4,116,-16,6,24,-127, 
  /* [44][0][][] */ 36,-6,-60,-127,66,-32,-8,-114, 
  /* [45][0][][] */ -93,127,-9,-45,6,-4,84,-65, 
  /* [46][0][][] */ -127,-29,46,22,-34,44,-93,51, 
  /* [47][0][][] */ 96,21,104,-2,25,-17,127,-30, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00094509642804041505, 0.00074708875035867095, 0.00064373802160844207, 0.00060690147802233696, 0.00052656128536909819, 0.00063727411907166243, 0.00075665028998628259, 0.002560565946623683, 0.00080349290510639548, 0.0042989803478121758, 0.0012502550380304456, 0.0038348070811480284, 0.00036686728708446026, 3.937008052901092e-09, 0.0015511214733123779, 0.00031273995409719646, 3.937008052901092e-09, 0.012629110366106033, 0.00081986153963953257, 0.00063675403362140059, 0.00049931614194065332, 0.0091356262564659119, 0.00066495360806584358, 0.0031829457730054855, 0.0021118938457220793, 0.0012976685538887978, 0.0043620136566460133, 0.0035144262947142124, 0.00043768476461991668, 0.0034033528063446283, 0.0022985895629972219, 0.00035686371847987175, 0.00035480677615851164, 0.017988322302699089, 0.00096633570501580834, 0.00087808136595413089, 0.0084525281563401222, 0.00056493701413273811, 0.004915070254355669, 0.00048196085845120251, 0.0025182317476719618, 0.00033788109431043267, 0.00082935323007404804, 0.016111889854073524, 0.00071694498183205724, 0.00099010416306555271, 0.00051599042490124702, 0.00044699743739329278, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1900, -39453, -8794, -13322, -31648, -2502, -24869, -27774, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020909847225993872, 0.00197053630836308, 0.0025168610736727715, 0.0011877827346324921, 0.0015342310070991516, 0.0025578925851732492, 0.0013863804051652551, 0.0010339034488424659, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-14,3,7,122,-1,-5,4,-1,-127,-95,-2,0,118,0,0, 
  /* [1][0][][] */ 0,-25,-13,85,71,12,19,8,0,-7,127,-49,0,27,-17,0, 
  /* [2][0][][] */ 0,-1,0,-8,-56,2,13,0,1,5,-17,3,0,127,-8,0, 
  /* [3][0][][] */ 0,-7,-18,-127,84,25,65,18,0,62,0,43,0,-1,19,0, 
  /* [4][0][][] */ 0,45,-21,30,-56,28,127,12,-1,-61,18,-14,0,-6,14,0, 
  /* [5][0][][] */ 0,-15,-10,-2,-24,-22,-12,17,-1,8,-5,-44,0,-5,127,0, 
  /* [6][0][][] */ 0,15,-8,-5,53,-16,-22,-4,-1,-114,120,63,0,127,62,0, 
  /* [7][0][][] */ 0,15,-18,127,10,-1,16,16,-1,66,-53,78,0,-10,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.088866852223873138, 0.083747789263725281, 0.10696659237146378, 0.050480764359235764, 0.065204814076423645, 0.10871043056249619, 0.058921165764331818, 0.043940898030996323, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 12793, 98326, 11111, 9788, 13086, 12161, 782, -12997, 6601, 28373, 15005, -445, 27164, 10456, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00020551096531562507, 4.0757400711299852e-05, 0.00031510787084698677, 0.00017567205941304564, 0.00025421197642572224, 0.0004290750075597316, 0.004948856309056282, 2.0517611119430512e-05, 0.00026932934997603297, 0.00021688362176064402, 0.00083949981490150094, 0.00072724185883998871, 0.00022712422651238739, 0.00020155748643446714, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,6,127,-25, 24,-24,91,-2,-72,67,-95,78,-95,-27,3,-16,61,2,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,15,-29,14,-28,1,3,-109,-49,8,-30,-14, -78,-42,-57,-15,-7,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,33,-26,33,-127,6,-2,1,-21,11,-4,43, 
  /* [0][2][][] */ -115,-73,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0087342159822583199, 0.0017321895575150847, 0.013392084278166294, 0.0074660624377429485, 0.010804008692502975, 0.018235687166452408, 0.21032638847827911, 0.0008719984907656908, 0.011446497403085232, 0.0092175537720322609, 0.035678740590810776, 0.030907778069376945, 0.0096527794376015663, 0.0085661932826042175, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 7747, -72834, 42688, 306456, 5806, 9249, -1781, -122715, 50760, 28311, 656014, -1073741824, 69705, 12804, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00021585803187917918, 0.00021411114721558988, 3.4742290154099464e-05, 1.1195003935426939e-05, 0.00021706036932300776, 0.00035247873165644705, 0.00026117567904293537, 3.5104847029288067e-06, 4.1979634261224419e-05, 0.00010633817873895168, 8.7136531874421053e-06, 1.1533876076441629e-09, 5.5043365136953071e-05, 0.0002860277600120753, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-5,29, -8,-26,11, -127,-121,-68, 
  /* [1][1][][] */ 1,-7,-3, -20,4,-4, 8,-25,12, 
  /* [1][2][][] */ -4,16,-2, -1,10,1, 46,-12,19, 
  /* [2][0][][] */ 28,-7,-7, 76,113,2, 39,-38,7, 
  /* [2][1][][] */ 10,12,-1, 72,127,-24, 18,-7,-8, 
  /* [2][2][][] */ 46,-67,17, 74,-41,-19, 29,-56,11, 
  /* [3][0][][] */ 13,41,9, 29,95,16, 0,5,-5, 
  /* [3][1][][] */ 31,47,15, 63,127,19, -17,-23,1, 
  /* [3][2][][] */ 17,14,15, 34,34,14, -2,-5,2, 
  /* [4][0][][] */ 54,88,5, 22,90,-5, -15,10,-2, 
  /* [4][1][][] */ 42,89,46, 21,112,19, 27,48,-20, 
  /* [4][2][][] */ 59,82,38, 52,127,20, -22,24,20, 
  /* [5][0][][] */ 11,4,-116, -2,2,-102, 0,34,-22, 
  /* [5][1][][] */ 5,-42,-127, -1,-45,-115, 3,17,-19, 
  /* [5][2][][] */ 0,11,-15, 2,-2,-11, 1,12,-11, 
  /* [6][0][][] */ 26,-62,35, 48,-87,40, 11,-19,10, 
  /* [6][1][][] */ 38,-95,63, 65,-127,73, 9,-27,18, 
  /* [6][2][][] */ 18,-37,11, 14,-45,25, -12,8,-1, 
  /* [7][0][][] */ -31,15,3, -106,-39,0, -25,22,0, 
  /* [7][1][][] */ -15,-10,-2, -127,-94,-10, -8,-7,3, 
  /* [7][2][][] */ -23,29,-9, -14,9,-2, -23,22,-5, 
  /* [8][0][][] */ 120,125,110, 119,125,109, 112,116,101, 
  /* [8][1][][] */ 121,123,109, 118,122,107, 112,115,100, 
  /* [8][2][][] */ 124,127,113, 123,127,112, 118,121,106, 
  /* [9][0][][] */ -18,-1,11, -8,-1,5, 10,10,-3, 
  /* [9][1][][] */ 97,114,-5, 75,127,18, -8,19,25, 
  /* [9][2][][] */ -20,-19,21, 8,-25,5, 8,2,-21, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -60,-104,-14, 79,127,14, -16,-26,0, 
  /* [10][2][][] */ -32,-20,1, 36,22,-11, -8,-1,7, 
  /* [11][0][][] */ -12,-24,2, 10,-43,6, 12,-99,-50, 
  /* [11][1][][] */ -46,-42,-18, -35,-64,-37, -17,-62,-56, 
  /* [11][2][][] */ -9,-41,-81, 118,127,63, -42,11,-50, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-98,-18, -62,-112,-26, -9,-18,-6, 
  /* [13][1][][] */ 62,115,15, 57,127,24, 8,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 43,-9,-40, 78,-28,-51, 30,-11,-22, 
  /* [14][1][][] */ 89,-18,-75, 127,-41,-90, 56,-22,-40, 
  /* [14][2][][] */ 55,-9,-46, 72,-24,-55, 22,-10,-22, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.7366663718785276e-07, 0.061562139540910721, 0.061063934117555618, 0.0099084097892045975, 0.0031927856616675854, 0.061905045062303543, 0.10052600502967834, 0.074486613273620605, 0.0010011809645220637, 0.01197248138487339, 0.030327368527650833, 0.0024851108901202679, 3.2894308787945192e-07, 0.015698222443461418, 0.081574365496635437, 3.5460718805779834e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.43327298760414124, } };
const TfArray<1, int> quant46_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.39936369657516479, } };
const TfArray<1, int> quant50_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.52414089441299438, } };
const TfArray<1, int> quant53_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.47207596898078918, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31756064295768738, } };
const TfArray<1, int> quant58_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22105288505554199, } };
const TfArray<1, int> quant61_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.34140312671661377, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.29598629474639893, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.47631183266639709, } };
const TfArray<1, int> quant66_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.089317694306373596, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13190890848636627, } };
const TfArray<1, int> quant69_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2928, (TfLiteIntArray*)&tensor_dimension69, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
